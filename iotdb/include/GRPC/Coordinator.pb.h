// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Coordinator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Coordinator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Coordinator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Coordinator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Coordinator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Coordinator_2eproto;
class AddParentReply;
class AddParentReplyDefaultTypeInternal;
extern AddParentReplyDefaultTypeInternal _AddParentReply_default_instance_;
class AddParentRequest;
class AddParentRequestDefaultTypeInternal;
extern AddParentRequestDefaultTypeInternal _AddParentRequest_default_instance_;
class RegisterLogicalStreamReply;
class RegisterLogicalStreamReplyDefaultTypeInternal;
extern RegisterLogicalStreamReplyDefaultTypeInternal _RegisterLogicalStreamReply_default_instance_;
class RegisterLogicalStreamRequest;
class RegisterLogicalStreamRequestDefaultTypeInternal;
extern RegisterLogicalStreamRequestDefaultTypeInternal _RegisterLogicalStreamRequest_default_instance_;
class RegisterNodeReply;
class RegisterNodeReplyDefaultTypeInternal;
extern RegisterNodeReplyDefaultTypeInternal _RegisterNodeReply_default_instance_;
class RegisterNodeRequest;
class RegisterNodeRequestDefaultTypeInternal;
extern RegisterNodeRequestDefaultTypeInternal _RegisterNodeRequest_default_instance_;
class RegisterPhysicalStreamReply;
class RegisterPhysicalStreamReplyDefaultTypeInternal;
extern RegisterPhysicalStreamReplyDefaultTypeInternal _RegisterPhysicalStreamReply_default_instance_;
class RegisterPhysicalStreamRequest;
class RegisterPhysicalStreamRequestDefaultTypeInternal;
extern RegisterPhysicalStreamRequestDefaultTypeInternal _RegisterPhysicalStreamRequest_default_instance_;
class RemoveParentReply;
class RemoveParentReplyDefaultTypeInternal;
extern RemoveParentReplyDefaultTypeInternal _RemoveParentReply_default_instance_;
class RemoveParentRequest;
class RemoveParentRequestDefaultTypeInternal;
extern RemoveParentRequestDefaultTypeInternal _RemoveParentRequest_default_instance_;
class UnregisterLogicalStreamReply;
class UnregisterLogicalStreamReplyDefaultTypeInternal;
extern UnregisterLogicalStreamReplyDefaultTypeInternal _UnregisterLogicalStreamReply_default_instance_;
class UnregisterLogicalStreamRequest;
class UnregisterLogicalStreamRequestDefaultTypeInternal;
extern UnregisterLogicalStreamRequestDefaultTypeInternal _UnregisterLogicalStreamRequest_default_instance_;
class UnregisterNodeReply;
class UnregisterNodeReplyDefaultTypeInternal;
extern UnregisterNodeReplyDefaultTypeInternal _UnregisterNodeReply_default_instance_;
class UnregisterNodeRequest;
class UnregisterNodeRequestDefaultTypeInternal;
extern UnregisterNodeRequestDefaultTypeInternal _UnregisterNodeRequest_default_instance_;
class UnregisterPhysicalStreamReply;
class UnregisterPhysicalStreamReplyDefaultTypeInternal;
extern UnregisterPhysicalStreamReplyDefaultTypeInternal _UnregisterPhysicalStreamReply_default_instance_;
class UnregisterPhysicalStreamRequest;
class UnregisterPhysicalStreamRequestDefaultTypeInternal;
extern UnregisterPhysicalStreamRequestDefaultTypeInternal _UnregisterPhysicalStreamRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddParentReply* Arena::CreateMaybeMessage<::AddParentReply>(Arena*);
template<> ::AddParentRequest* Arena::CreateMaybeMessage<::AddParentRequest>(Arena*);
template<> ::RegisterLogicalStreamReply* Arena::CreateMaybeMessage<::RegisterLogicalStreamReply>(Arena*);
template<> ::RegisterLogicalStreamRequest* Arena::CreateMaybeMessage<::RegisterLogicalStreamRequest>(Arena*);
template<> ::RegisterNodeReply* Arena::CreateMaybeMessage<::RegisterNodeReply>(Arena*);
template<> ::RegisterNodeRequest* Arena::CreateMaybeMessage<::RegisterNodeRequest>(Arena*);
template<> ::RegisterPhysicalStreamReply* Arena::CreateMaybeMessage<::RegisterPhysicalStreamReply>(Arena*);
template<> ::RegisterPhysicalStreamRequest* Arena::CreateMaybeMessage<::RegisterPhysicalStreamRequest>(Arena*);
template<> ::RemoveParentReply* Arena::CreateMaybeMessage<::RemoveParentReply>(Arena*);
template<> ::RemoveParentRequest* Arena::CreateMaybeMessage<::RemoveParentRequest>(Arena*);
template<> ::UnregisterLogicalStreamReply* Arena::CreateMaybeMessage<::UnregisterLogicalStreamReply>(Arena*);
template<> ::UnregisterLogicalStreamRequest* Arena::CreateMaybeMessage<::UnregisterLogicalStreamRequest>(Arena*);
template<> ::UnregisterNodeReply* Arena::CreateMaybeMessage<::UnregisterNodeReply>(Arena*);
template<> ::UnregisterNodeRequest* Arena::CreateMaybeMessage<::UnregisterNodeRequest>(Arena*);
template<> ::UnregisterPhysicalStreamReply* Arena::CreateMaybeMessage<::UnregisterPhysicalStreamReply>(Arena*);
template<> ::UnregisterPhysicalStreamRequest* Arena::CreateMaybeMessage<::UnregisterPhysicalStreamRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RegisterNodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterNodeRequest) */ {
 public:
  RegisterNodeRequest();
  virtual ~RegisterNodeRequest();

  RegisterNodeRequest(const RegisterNodeRequest& from);
  RegisterNodeRequest(RegisterNodeRequest&& from) noexcept
    : RegisterNodeRequest() {
    *this = ::std::move(from);
  }

  inline RegisterNodeRequest& operator=(const RegisterNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeRequest& operator=(RegisterNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterNodeRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeRequest*>(
               &_RegisterNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterNodeRequest& a, RegisterNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterNodeRequest* New() const final {
    return CreateMaybeMessage<RegisterNodeRequest>(nullptr);
  }

  RegisterNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterNodeRequest& from);
  void MergeFrom(const RegisterNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterNodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kNodePropertiesFieldNumber = 5,
    kRpcPortFieldNumber = 2,
    kZmqPortFieldNumber = 3,
    kNumberOfCpusFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string nodeProperties = 5;
  void clear_nodeproperties();
  const std::string& nodeproperties() const;
  void set_nodeproperties(const std::string& value);
  void set_nodeproperties(std::string&& value);
  void set_nodeproperties(const char* value);
  void set_nodeproperties(const char* value, size_t size);
  std::string* mutable_nodeproperties();
  std::string* release_nodeproperties();
  void set_allocated_nodeproperties(std::string* nodeproperties);
  private:
  const std::string& _internal_nodeproperties() const;
  void _internal_set_nodeproperties(const std::string& value);
  std::string* _internal_mutable_nodeproperties();
  public:

  // int32 rpcPort = 2;
  void clear_rpcport();
  ::PROTOBUF_NAMESPACE_ID::int32 rpcport() const;
  void set_rpcport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rpcport() const;
  void _internal_set_rpcport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 zmqPort = 3;
  void clear_zmqport();
  ::PROTOBUF_NAMESPACE_ID::int32 zmqport() const;
  void set_zmqport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zmqport() const;
  void _internal_set_zmqport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 numberOfCpus = 4;
  void clear_numberofcpus();
  ::PROTOBUF_NAMESPACE_ID::int32 numberofcpus() const;
  void set_numberofcpus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numberofcpus() const;
  void _internal_set_numberofcpus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 6;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterNodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeproperties_;
  ::PROTOBUF_NAMESPACE_ID::int32 rpcport_;
  ::PROTOBUF_NAMESPACE_ID::int32 zmqport_;
  ::PROTOBUF_NAMESPACE_ID::int32 numberofcpus_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class RegisterNodeReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterNodeReply) */ {
 public:
  RegisterNodeReply();
  virtual ~RegisterNodeReply();

  RegisterNodeReply(const RegisterNodeReply& from);
  RegisterNodeReply(RegisterNodeReply&& from) noexcept
    : RegisterNodeReply() {
    *this = ::std::move(from);
  }

  inline RegisterNodeReply& operator=(const RegisterNodeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeReply& operator=(RegisterNodeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterNodeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterNodeReply* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeReply*>(
               &_RegisterNodeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterNodeReply& a, RegisterNodeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterNodeReply* New() const final {
    return CreateMaybeMessage<RegisterNodeReply>(nullptr);
  }

  RegisterNodeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterNodeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterNodeReply& from);
  void MergeFrom(const RegisterNodeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterNodeReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterNodeReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class UnregisterNodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnregisterNodeRequest) */ {
 public:
  UnregisterNodeRequest();
  virtual ~UnregisterNodeRequest();

  UnregisterNodeRequest(const UnregisterNodeRequest& from);
  UnregisterNodeRequest(UnregisterNodeRequest&& from) noexcept
    : UnregisterNodeRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterNodeRequest& operator=(const UnregisterNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterNodeRequest& operator=(UnregisterNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterNodeRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterNodeRequest*>(
               &_UnregisterNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnregisterNodeRequest& a, UnregisterNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterNodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterNodeRequest* New() const final {
    return CreateMaybeMessage<UnregisterNodeRequest>(nullptr);
  }

  UnregisterNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterNodeRequest& from);
  void MergeFrom(const UnregisterNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnregisterNodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:UnregisterNodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class UnregisterNodeReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnregisterNodeReply) */ {
 public:
  UnregisterNodeReply();
  virtual ~UnregisterNodeReply();

  UnregisterNodeReply(const UnregisterNodeReply& from);
  UnregisterNodeReply(UnregisterNodeReply&& from) noexcept
    : UnregisterNodeReply() {
    *this = ::std::move(from);
  }

  inline UnregisterNodeReply& operator=(const UnregisterNodeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterNodeReply& operator=(UnregisterNodeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterNodeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterNodeReply* internal_default_instance() {
    return reinterpret_cast<const UnregisterNodeReply*>(
               &_UnregisterNodeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnregisterNodeReply& a, UnregisterNodeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterNodeReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterNodeReply* New() const final {
    return CreateMaybeMessage<UnregisterNodeReply>(nullptr);
  }

  UnregisterNodeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterNodeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterNodeReply& from);
  void MergeFrom(const UnregisterNodeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterNodeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnregisterNodeReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnregisterNodeReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class RegisterPhysicalStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterPhysicalStreamRequest) */ {
 public:
  RegisterPhysicalStreamRequest();
  virtual ~RegisterPhysicalStreamRequest();

  RegisterPhysicalStreamRequest(const RegisterPhysicalStreamRequest& from);
  RegisterPhysicalStreamRequest(RegisterPhysicalStreamRequest&& from) noexcept
    : RegisterPhysicalStreamRequest() {
    *this = ::std::move(from);
  }

  inline RegisterPhysicalStreamRequest& operator=(const RegisterPhysicalStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPhysicalStreamRequest& operator=(RegisterPhysicalStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPhysicalStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPhysicalStreamRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterPhysicalStreamRequest*>(
               &_RegisterPhysicalStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterPhysicalStreamRequest& a, RegisterPhysicalStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPhysicalStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPhysicalStreamRequest* New() const final {
    return CreateMaybeMessage<RegisterPhysicalStreamRequest>(nullptr);
  }

  RegisterPhysicalStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPhysicalStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPhysicalStreamRequest& from);
  void MergeFrom(const RegisterPhysicalStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPhysicalStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterPhysicalStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceTypeFieldNumber = 2,
    kSourceConfFieldNumber = 3,
    kPhysicalStreamNameFieldNumber = 6,
    kLogicalStreamNameFieldNumber = 7,
    kIdFieldNumber = 1,
    kSourceFrequencyFieldNumber = 4,
    kNumberOfBuffersToProduceFieldNumber = 5,
  };
  // string sourceType = 2;
  void clear_sourcetype();
  const std::string& sourcetype() const;
  void set_sourcetype(const std::string& value);
  void set_sourcetype(std::string&& value);
  void set_sourcetype(const char* value);
  void set_sourcetype(const char* value, size_t size);
  std::string* mutable_sourcetype();
  std::string* release_sourcetype();
  void set_allocated_sourcetype(std::string* sourcetype);
  private:
  const std::string& _internal_sourcetype() const;
  void _internal_set_sourcetype(const std::string& value);
  std::string* _internal_mutable_sourcetype();
  public:

  // string sourceConf = 3;
  void clear_sourceconf();
  const std::string& sourceconf() const;
  void set_sourceconf(const std::string& value);
  void set_sourceconf(std::string&& value);
  void set_sourceconf(const char* value);
  void set_sourceconf(const char* value, size_t size);
  std::string* mutable_sourceconf();
  std::string* release_sourceconf();
  void set_allocated_sourceconf(std::string* sourceconf);
  private:
  const std::string& _internal_sourceconf() const;
  void _internal_set_sourceconf(const std::string& value);
  std::string* _internal_mutable_sourceconf();
  public:

  // string physicalStreamName = 6;
  void clear_physicalstreamname();
  const std::string& physicalstreamname() const;
  void set_physicalstreamname(const std::string& value);
  void set_physicalstreamname(std::string&& value);
  void set_physicalstreamname(const char* value);
  void set_physicalstreamname(const char* value, size_t size);
  std::string* mutable_physicalstreamname();
  std::string* release_physicalstreamname();
  void set_allocated_physicalstreamname(std::string* physicalstreamname);
  private:
  const std::string& _internal_physicalstreamname() const;
  void _internal_set_physicalstreamname(const std::string& value);
  std::string* _internal_mutable_physicalstreamname();
  public:

  // string logicalStreamName = 7;
  void clear_logicalstreamname();
  const std::string& logicalstreamname() const;
  void set_logicalstreamname(const std::string& value);
  void set_logicalstreamname(std::string&& value);
  void set_logicalstreamname(const char* value);
  void set_logicalstreamname(const char* value, size_t size);
  std::string* mutable_logicalstreamname();
  std::string* release_logicalstreamname();
  void set_allocated_logicalstreamname(std::string* logicalstreamname);
  private:
  const std::string& _internal_logicalstreamname() const;
  void _internal_set_logicalstreamname(const std::string& value);
  std::string* _internal_mutable_logicalstreamname();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sourceFrequency = 4;
  void clear_sourcefrequency();
  ::PROTOBUF_NAMESPACE_ID::int64 sourcefrequency() const;
  void set_sourcefrequency(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sourcefrequency() const;
  void _internal_set_sourcefrequency(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 numberOfBuffersToProduce = 5;
  void clear_numberofbufferstoproduce();
  ::PROTOBUF_NAMESPACE_ID::int64 numberofbufferstoproduce() const;
  void set_numberofbufferstoproduce(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_numberofbufferstoproduce() const;
  void _internal_set_numberofbufferstoproduce(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterPhysicalStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceconf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physicalstreamname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logicalstreamname_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sourcefrequency_;
  ::PROTOBUF_NAMESPACE_ID::int64 numberofbufferstoproduce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class RegisterPhysicalStreamReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterPhysicalStreamReply) */ {
 public:
  RegisterPhysicalStreamReply();
  virtual ~RegisterPhysicalStreamReply();

  RegisterPhysicalStreamReply(const RegisterPhysicalStreamReply& from);
  RegisterPhysicalStreamReply(RegisterPhysicalStreamReply&& from) noexcept
    : RegisterPhysicalStreamReply() {
    *this = ::std::move(from);
  }

  inline RegisterPhysicalStreamReply& operator=(const RegisterPhysicalStreamReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPhysicalStreamReply& operator=(RegisterPhysicalStreamReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPhysicalStreamReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPhysicalStreamReply* internal_default_instance() {
    return reinterpret_cast<const RegisterPhysicalStreamReply*>(
               &_RegisterPhysicalStreamReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterPhysicalStreamReply& a, RegisterPhysicalStreamReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPhysicalStreamReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPhysicalStreamReply* New() const final {
    return CreateMaybeMessage<RegisterPhysicalStreamReply>(nullptr);
  }

  RegisterPhysicalStreamReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPhysicalStreamReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPhysicalStreamReply& from);
  void MergeFrom(const RegisterPhysicalStreamReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPhysicalStreamReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterPhysicalStreamReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterPhysicalStreamReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class UnregisterPhysicalStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnregisterPhysicalStreamRequest) */ {
 public:
  UnregisterPhysicalStreamRequest();
  virtual ~UnregisterPhysicalStreamRequest();

  UnregisterPhysicalStreamRequest(const UnregisterPhysicalStreamRequest& from);
  UnregisterPhysicalStreamRequest(UnregisterPhysicalStreamRequest&& from) noexcept
    : UnregisterPhysicalStreamRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterPhysicalStreamRequest& operator=(const UnregisterPhysicalStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterPhysicalStreamRequest& operator=(UnregisterPhysicalStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterPhysicalStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterPhysicalStreamRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterPhysicalStreamRequest*>(
               &_UnregisterPhysicalStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnregisterPhysicalStreamRequest& a, UnregisterPhysicalStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterPhysicalStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterPhysicalStreamRequest* New() const final {
    return CreateMaybeMessage<UnregisterPhysicalStreamRequest>(nullptr);
  }

  UnregisterPhysicalStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterPhysicalStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterPhysicalStreamRequest& from);
  void MergeFrom(const UnregisterPhysicalStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterPhysicalStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnregisterPhysicalStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhysicalStreamNameFieldNumber = 2,
    kLogicalStreamNameFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string physicalStreamName = 2;
  void clear_physicalstreamname();
  const std::string& physicalstreamname() const;
  void set_physicalstreamname(const std::string& value);
  void set_physicalstreamname(std::string&& value);
  void set_physicalstreamname(const char* value);
  void set_physicalstreamname(const char* value, size_t size);
  std::string* mutable_physicalstreamname();
  std::string* release_physicalstreamname();
  void set_allocated_physicalstreamname(std::string* physicalstreamname);
  private:
  const std::string& _internal_physicalstreamname() const;
  void _internal_set_physicalstreamname(const std::string& value);
  std::string* _internal_mutable_physicalstreamname();
  public:

  // string logicalStreamName = 3;
  void clear_logicalstreamname();
  const std::string& logicalstreamname() const;
  void set_logicalstreamname(const std::string& value);
  void set_logicalstreamname(std::string&& value);
  void set_logicalstreamname(const char* value);
  void set_logicalstreamname(const char* value, size_t size);
  std::string* mutable_logicalstreamname();
  std::string* release_logicalstreamname();
  void set_allocated_logicalstreamname(std::string* logicalstreamname);
  private:
  const std::string& _internal_logicalstreamname() const;
  void _internal_set_logicalstreamname(const std::string& value);
  std::string* _internal_mutable_logicalstreamname();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:UnregisterPhysicalStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physicalstreamname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logicalstreamname_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class UnregisterPhysicalStreamReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnregisterPhysicalStreamReply) */ {
 public:
  UnregisterPhysicalStreamReply();
  virtual ~UnregisterPhysicalStreamReply();

  UnregisterPhysicalStreamReply(const UnregisterPhysicalStreamReply& from);
  UnregisterPhysicalStreamReply(UnregisterPhysicalStreamReply&& from) noexcept
    : UnregisterPhysicalStreamReply() {
    *this = ::std::move(from);
  }

  inline UnregisterPhysicalStreamReply& operator=(const UnregisterPhysicalStreamReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterPhysicalStreamReply& operator=(UnregisterPhysicalStreamReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterPhysicalStreamReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterPhysicalStreamReply* internal_default_instance() {
    return reinterpret_cast<const UnregisterPhysicalStreamReply*>(
               &_UnregisterPhysicalStreamReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnregisterPhysicalStreamReply& a, UnregisterPhysicalStreamReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterPhysicalStreamReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterPhysicalStreamReply* New() const final {
    return CreateMaybeMessage<UnregisterPhysicalStreamReply>(nullptr);
  }

  UnregisterPhysicalStreamReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterPhysicalStreamReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterPhysicalStreamReply& from);
  void MergeFrom(const UnregisterPhysicalStreamReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterPhysicalStreamReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnregisterPhysicalStreamReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnregisterPhysicalStreamReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class RegisterLogicalStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterLogicalStreamRequest) */ {
 public:
  RegisterLogicalStreamRequest();
  virtual ~RegisterLogicalStreamRequest();

  RegisterLogicalStreamRequest(const RegisterLogicalStreamRequest& from);
  RegisterLogicalStreamRequest(RegisterLogicalStreamRequest&& from) noexcept
    : RegisterLogicalStreamRequest() {
    *this = ::std::move(from);
  }

  inline RegisterLogicalStreamRequest& operator=(const RegisterLogicalStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterLogicalStreamRequest& operator=(RegisterLogicalStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterLogicalStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterLogicalStreamRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterLogicalStreamRequest*>(
               &_RegisterLogicalStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RegisterLogicalStreamRequest& a, RegisterLogicalStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterLogicalStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterLogicalStreamRequest* New() const final {
    return CreateMaybeMessage<RegisterLogicalStreamRequest>(nullptr);
  }

  RegisterLogicalStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterLogicalStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterLogicalStreamRequest& from);
  void MergeFrom(const RegisterLogicalStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterLogicalStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterLogicalStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 2,
    kStreamSchemaFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string streamName = 2;
  void clear_streamname();
  const std::string& streamname() const;
  void set_streamname(const std::string& value);
  void set_streamname(std::string&& value);
  void set_streamname(const char* value);
  void set_streamname(const char* value, size_t size);
  std::string* mutable_streamname();
  std::string* release_streamname();
  void set_allocated_streamname(std::string* streamname);
  private:
  const std::string& _internal_streamname() const;
  void _internal_set_streamname(const std::string& value);
  std::string* _internal_mutable_streamname();
  public:

  // string streamSchema = 3;
  void clear_streamschema();
  const std::string& streamschema() const;
  void set_streamschema(const std::string& value);
  void set_streamschema(std::string&& value);
  void set_streamschema(const char* value);
  void set_streamschema(const char* value, size_t size);
  std::string* mutable_streamschema();
  std::string* release_streamschema();
  void set_allocated_streamschema(std::string* streamschema);
  private:
  const std::string& _internal_streamschema() const;
  void _internal_set_streamschema(const std::string& value);
  std::string* _internal_mutable_streamschema();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterLogicalStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamschema_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class RegisterLogicalStreamReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterLogicalStreamReply) */ {
 public:
  RegisterLogicalStreamReply();
  virtual ~RegisterLogicalStreamReply();

  RegisterLogicalStreamReply(const RegisterLogicalStreamReply& from);
  RegisterLogicalStreamReply(RegisterLogicalStreamReply&& from) noexcept
    : RegisterLogicalStreamReply() {
    *this = ::std::move(from);
  }

  inline RegisterLogicalStreamReply& operator=(const RegisterLogicalStreamReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterLogicalStreamReply& operator=(RegisterLogicalStreamReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterLogicalStreamReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterLogicalStreamReply* internal_default_instance() {
    return reinterpret_cast<const RegisterLogicalStreamReply*>(
               &_RegisterLogicalStreamReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RegisterLogicalStreamReply& a, RegisterLogicalStreamReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterLogicalStreamReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterLogicalStreamReply* New() const final {
    return CreateMaybeMessage<RegisterLogicalStreamReply>(nullptr);
  }

  RegisterLogicalStreamReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterLogicalStreamReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterLogicalStreamReply& from);
  void MergeFrom(const RegisterLogicalStreamReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterLogicalStreamReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterLogicalStreamReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterLogicalStreamReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class UnregisterLogicalStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnregisterLogicalStreamRequest) */ {
 public:
  UnregisterLogicalStreamRequest();
  virtual ~UnregisterLogicalStreamRequest();

  UnregisterLogicalStreamRequest(const UnregisterLogicalStreamRequest& from);
  UnregisterLogicalStreamRequest(UnregisterLogicalStreamRequest&& from) noexcept
    : UnregisterLogicalStreamRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterLogicalStreamRequest& operator=(const UnregisterLogicalStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterLogicalStreamRequest& operator=(UnregisterLogicalStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterLogicalStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterLogicalStreamRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterLogicalStreamRequest*>(
               &_UnregisterLogicalStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UnregisterLogicalStreamRequest& a, UnregisterLogicalStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterLogicalStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterLogicalStreamRequest* New() const final {
    return CreateMaybeMessage<UnregisterLogicalStreamRequest>(nullptr);
  }

  UnregisterLogicalStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterLogicalStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterLogicalStreamRequest& from);
  void MergeFrom(const UnregisterLogicalStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterLogicalStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnregisterLogicalStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string streamName = 2;
  void clear_streamname();
  const std::string& streamname() const;
  void set_streamname(const std::string& value);
  void set_streamname(std::string&& value);
  void set_streamname(const char* value);
  void set_streamname(const char* value, size_t size);
  std::string* mutable_streamname();
  std::string* release_streamname();
  void set_allocated_streamname(std::string* streamname);
  private:
  const std::string& _internal_streamname() const;
  void _internal_set_streamname(const std::string& value);
  std::string* _internal_mutable_streamname();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:UnregisterLogicalStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamname_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class UnregisterLogicalStreamReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnregisterLogicalStreamReply) */ {
 public:
  UnregisterLogicalStreamReply();
  virtual ~UnregisterLogicalStreamReply();

  UnregisterLogicalStreamReply(const UnregisterLogicalStreamReply& from);
  UnregisterLogicalStreamReply(UnregisterLogicalStreamReply&& from) noexcept
    : UnregisterLogicalStreamReply() {
    *this = ::std::move(from);
  }

  inline UnregisterLogicalStreamReply& operator=(const UnregisterLogicalStreamReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterLogicalStreamReply& operator=(UnregisterLogicalStreamReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterLogicalStreamReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterLogicalStreamReply* internal_default_instance() {
    return reinterpret_cast<const UnregisterLogicalStreamReply*>(
               &_UnregisterLogicalStreamReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UnregisterLogicalStreamReply& a, UnregisterLogicalStreamReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterLogicalStreamReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterLogicalStreamReply* New() const final {
    return CreateMaybeMessage<UnregisterLogicalStreamReply>(nullptr);
  }

  UnregisterLogicalStreamReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterLogicalStreamReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterLogicalStreamReply& from);
  void MergeFrom(const UnregisterLogicalStreamReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterLogicalStreamReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnregisterLogicalStreamReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnregisterLogicalStreamReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class AddParentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddParentRequest) */ {
 public:
  AddParentRequest();
  virtual ~AddParentRequest();

  AddParentRequest(const AddParentRequest& from);
  AddParentRequest(AddParentRequest&& from) noexcept
    : AddParentRequest() {
    *this = ::std::move(from);
  }

  inline AddParentRequest& operator=(const AddParentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddParentRequest& operator=(AddParentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddParentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddParentRequest* internal_default_instance() {
    return reinterpret_cast<const AddParentRequest*>(
               &_AddParentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AddParentRequest& a, AddParentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddParentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddParentRequest* New() const final {
    return CreateMaybeMessage<AddParentRequest>(nullptr);
  }

  AddParentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddParentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddParentRequest& from);
  void MergeFrom(const AddParentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddParentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddParentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
  };
  // string childId = 1;
  void clear_childid();
  const std::string& childid() const;
  void set_childid(const std::string& value);
  void set_childid(std::string&& value);
  void set_childid(const char* value);
  void set_childid(const char* value, size_t size);
  std::string* mutable_childid();
  std::string* release_childid();
  void set_allocated_childid(std::string* childid);
  private:
  const std::string& _internal_childid() const;
  void _internal_set_childid(const std::string& value);
  std::string* _internal_mutable_childid();
  public:

  // string parentId = 2;
  void clear_parentid();
  const std::string& parentid() const;
  void set_parentid(const std::string& value);
  void set_parentid(std::string&& value);
  void set_parentid(const char* value);
  void set_parentid(const char* value, size_t size);
  std::string* mutable_parentid();
  std::string* release_parentid();
  void set_allocated_parentid(std::string* parentid);
  private:
  const std::string& _internal_parentid() const;
  void _internal_set_parentid(const std::string& value);
  std::string* _internal_mutable_parentid();
  public:

  // @@protoc_insertion_point(class_scope:AddParentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr childid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class AddParentReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddParentReply) */ {
 public:
  AddParentReply();
  virtual ~AddParentReply();

  AddParentReply(const AddParentReply& from);
  AddParentReply(AddParentReply&& from) noexcept
    : AddParentReply() {
    *this = ::std::move(from);
  }

  inline AddParentReply& operator=(const AddParentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddParentReply& operator=(AddParentReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddParentReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddParentReply* internal_default_instance() {
    return reinterpret_cast<const AddParentReply*>(
               &_AddParentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AddParentReply& a, AddParentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AddParentReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddParentReply* New() const final {
    return CreateMaybeMessage<AddParentReply>(nullptr);
  }

  AddParentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddParentReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddParentReply& from);
  void MergeFrom(const AddParentReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddParentReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddParentReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AddParentReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class RemoveParentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoveParentRequest) */ {
 public:
  RemoveParentRequest();
  virtual ~RemoveParentRequest();

  RemoveParentRequest(const RemoveParentRequest& from);
  RemoveParentRequest(RemoveParentRequest&& from) noexcept
    : RemoveParentRequest() {
    *this = ::std::move(from);
  }

  inline RemoveParentRequest& operator=(const RemoveParentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveParentRequest& operator=(RemoveParentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveParentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveParentRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveParentRequest*>(
               &_RemoveParentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RemoveParentRequest& a, RemoveParentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveParentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveParentRequest* New() const final {
    return CreateMaybeMessage<RemoveParentRequest>(nullptr);
  }

  RemoveParentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveParentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveParentRequest& from);
  void MergeFrom(const RemoveParentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveParentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoveParentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
  };
  // string childId = 1;
  void clear_childid();
  const std::string& childid() const;
  void set_childid(const std::string& value);
  void set_childid(std::string&& value);
  void set_childid(const char* value);
  void set_childid(const char* value, size_t size);
  std::string* mutable_childid();
  std::string* release_childid();
  void set_allocated_childid(std::string* childid);
  private:
  const std::string& _internal_childid() const;
  void _internal_set_childid(const std::string& value);
  std::string* _internal_mutable_childid();
  public:

  // string parentId = 2;
  void clear_parentid();
  const std::string& parentid() const;
  void set_parentid(const std::string& value);
  void set_parentid(std::string&& value);
  void set_parentid(const char* value);
  void set_parentid(const char* value, size_t size);
  std::string* mutable_parentid();
  std::string* release_parentid();
  void set_allocated_parentid(std::string* parentid);
  private:
  const std::string& _internal_parentid() const;
  void _internal_set_parentid(const std::string& value);
  std::string* _internal_mutable_parentid();
  public:

  // @@protoc_insertion_point(class_scope:RemoveParentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr childid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// -------------------------------------------------------------------

class RemoveParentReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoveParentReply) */ {
 public:
  RemoveParentReply();
  virtual ~RemoveParentReply();

  RemoveParentReply(const RemoveParentReply& from);
  RemoveParentReply(RemoveParentReply&& from) noexcept
    : RemoveParentReply() {
    *this = ::std::move(from);
  }

  inline RemoveParentReply& operator=(const RemoveParentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveParentReply& operator=(RemoveParentReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveParentReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveParentReply* internal_default_instance() {
    return reinterpret_cast<const RemoveParentReply*>(
               &_RemoveParentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RemoveParentReply& a, RemoveParentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveParentReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveParentReply* New() const final {
    return CreateMaybeMessage<RemoveParentReply>(nullptr);
  }

  RemoveParentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveParentReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveParentReply& from);
  void MergeFrom(const RemoveParentReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveParentReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoveParentReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Coordinator_2eproto);
    return ::descriptor_table_Coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RemoveParentReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Coordinator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterNodeRequest

// string ip = 1;
inline void RegisterNodeRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterNodeRequest::ip() const {
  // @@protoc_insertion_point(field_get:RegisterNodeRequest.ip)
  return _internal_ip();
}
inline void RegisterNodeRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:RegisterNodeRequest.ip)
}
inline std::string* RegisterNodeRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:RegisterNodeRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& RegisterNodeRequest::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void RegisterNodeRequest::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterNodeRequest::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterNodeRequest.ip)
}
inline void RegisterNodeRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterNodeRequest.ip)
}
inline void RegisterNodeRequest::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterNodeRequest.ip)
}
inline std::string* RegisterNodeRequest::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterNodeRequest::release_ip() {
  // @@protoc_insertion_point(field_release:RegisterNodeRequest.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterNodeRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:RegisterNodeRequest.ip)
}

// int32 rpcPort = 2;
inline void RegisterNodeRequest::clear_rpcport() {
  rpcport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterNodeRequest::_internal_rpcport() const {
  return rpcport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterNodeRequest::rpcport() const {
  // @@protoc_insertion_point(field_get:RegisterNodeRequest.rpcPort)
  return _internal_rpcport();
}
inline void RegisterNodeRequest::_internal_set_rpcport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rpcport_ = value;
}
inline void RegisterNodeRequest::set_rpcport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rpcport(value);
  // @@protoc_insertion_point(field_set:RegisterNodeRequest.rpcPort)
}

// int32 zmqPort = 3;
inline void RegisterNodeRequest::clear_zmqport() {
  zmqport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterNodeRequest::_internal_zmqport() const {
  return zmqport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterNodeRequest::zmqport() const {
  // @@protoc_insertion_point(field_get:RegisterNodeRequest.zmqPort)
  return _internal_zmqport();
}
inline void RegisterNodeRequest::_internal_set_zmqport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zmqport_ = value;
}
inline void RegisterNodeRequest::set_zmqport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zmqport(value);
  // @@protoc_insertion_point(field_set:RegisterNodeRequest.zmqPort)
}

// int32 numberOfCpus = 4;
inline void RegisterNodeRequest::clear_numberofcpus() {
  numberofcpus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterNodeRequest::_internal_numberofcpus() const {
  return numberofcpus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterNodeRequest::numberofcpus() const {
  // @@protoc_insertion_point(field_get:RegisterNodeRequest.numberOfCpus)
  return _internal_numberofcpus();
}
inline void RegisterNodeRequest::_internal_set_numberofcpus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numberofcpus_ = value;
}
inline void RegisterNodeRequest::set_numberofcpus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numberofcpus(value);
  // @@protoc_insertion_point(field_set:RegisterNodeRequest.numberOfCpus)
}

// string nodeProperties = 5;
inline void RegisterNodeRequest::clear_nodeproperties() {
  nodeproperties_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterNodeRequest::nodeproperties() const {
  // @@protoc_insertion_point(field_get:RegisterNodeRequest.nodeProperties)
  return _internal_nodeproperties();
}
inline void RegisterNodeRequest::set_nodeproperties(const std::string& value) {
  _internal_set_nodeproperties(value);
  // @@protoc_insertion_point(field_set:RegisterNodeRequest.nodeProperties)
}
inline std::string* RegisterNodeRequest::mutable_nodeproperties() {
  // @@protoc_insertion_point(field_mutable:RegisterNodeRequest.nodeProperties)
  return _internal_mutable_nodeproperties();
}
inline const std::string& RegisterNodeRequest::_internal_nodeproperties() const {
  return nodeproperties_.GetNoArena();
}
inline void RegisterNodeRequest::_internal_set_nodeproperties(const std::string& value) {
  
  nodeproperties_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterNodeRequest::set_nodeproperties(std::string&& value) {
  
  nodeproperties_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterNodeRequest.nodeProperties)
}
inline void RegisterNodeRequest::set_nodeproperties(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeproperties_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterNodeRequest.nodeProperties)
}
inline void RegisterNodeRequest::set_nodeproperties(const char* value, size_t size) {
  
  nodeproperties_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterNodeRequest.nodeProperties)
}
inline std::string* RegisterNodeRequest::_internal_mutable_nodeproperties() {
  
  return nodeproperties_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterNodeRequest::release_nodeproperties() {
  // @@protoc_insertion_point(field_release:RegisterNodeRequest.nodeProperties)
  
  return nodeproperties_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterNodeRequest::set_allocated_nodeproperties(std::string* nodeproperties) {
  if (nodeproperties != nullptr) {
    
  } else {
    
  }
  nodeproperties_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeproperties);
  // @@protoc_insertion_point(field_set_allocated:RegisterNodeRequest.nodeProperties)
}

// int32 type = 6;
inline void RegisterNodeRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterNodeRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterNodeRequest::type() const {
  // @@protoc_insertion_point(field_get:RegisterNodeRequest.type)
  return _internal_type();
}
inline void RegisterNodeRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void RegisterNodeRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RegisterNodeRequest.type)
}

// -------------------------------------------------------------------

// RegisterNodeReply

// int64 id = 1;
inline void RegisterNodeReply::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterNodeReply::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterNodeReply::id() const {
  // @@protoc_insertion_point(field_get:RegisterNodeReply.id)
  return _internal_id();
}
inline void RegisterNodeReply::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void RegisterNodeReply::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RegisterNodeReply.id)
}

// -------------------------------------------------------------------

// UnregisterNodeRequest

// int64 id = 1;
inline void UnregisterNodeRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnregisterNodeRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnregisterNodeRequest::id() const {
  // @@protoc_insertion_point(field_get:UnregisterNodeRequest.id)
  return _internal_id();
}
inline void UnregisterNodeRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UnregisterNodeRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UnregisterNodeRequest.id)
}

// -------------------------------------------------------------------

// UnregisterNodeReply

// bool success = 1;
inline void UnregisterNodeReply::clear_success() {
  success_ = false;
}
inline bool UnregisterNodeReply::_internal_success() const {
  return success_;
}
inline bool UnregisterNodeReply::success() const {
  // @@protoc_insertion_point(field_get:UnregisterNodeReply.success)
  return _internal_success();
}
inline void UnregisterNodeReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UnregisterNodeReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:UnregisterNodeReply.success)
}

// -------------------------------------------------------------------

// RegisterPhysicalStreamRequest

// int64 id = 1;
inline void RegisterPhysicalStreamRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterPhysicalStreamRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterPhysicalStreamRequest::id() const {
  // @@protoc_insertion_point(field_get:RegisterPhysicalStreamRequest.id)
  return _internal_id();
}
inline void RegisterPhysicalStreamRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void RegisterPhysicalStreamRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RegisterPhysicalStreamRequest.id)
}

// string sourceType = 2;
inline void RegisterPhysicalStreamRequest::clear_sourcetype() {
  sourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPhysicalStreamRequest::sourcetype() const {
  // @@protoc_insertion_point(field_get:RegisterPhysicalStreamRequest.sourceType)
  return _internal_sourcetype();
}
inline void RegisterPhysicalStreamRequest::set_sourcetype(const std::string& value) {
  _internal_set_sourcetype(value);
  // @@protoc_insertion_point(field_set:RegisterPhysicalStreamRequest.sourceType)
}
inline std::string* RegisterPhysicalStreamRequest::mutable_sourcetype() {
  // @@protoc_insertion_point(field_mutable:RegisterPhysicalStreamRequest.sourceType)
  return _internal_mutable_sourcetype();
}
inline const std::string& RegisterPhysicalStreamRequest::_internal_sourcetype() const {
  return sourcetype_.GetNoArena();
}
inline void RegisterPhysicalStreamRequest::_internal_set_sourcetype(const std::string& value) {
  
  sourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPhysicalStreamRequest::set_sourcetype(std::string&& value) {
  
  sourcetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterPhysicalStreamRequest.sourceType)
}
inline void RegisterPhysicalStreamRequest::set_sourcetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterPhysicalStreamRequest.sourceType)
}
inline void RegisterPhysicalStreamRequest::set_sourcetype(const char* value, size_t size) {
  
  sourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterPhysicalStreamRequest.sourceType)
}
inline std::string* RegisterPhysicalStreamRequest::_internal_mutable_sourcetype() {
  
  return sourcetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPhysicalStreamRequest::release_sourcetype() {
  // @@protoc_insertion_point(field_release:RegisterPhysicalStreamRequest.sourceType)
  
  return sourcetype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPhysicalStreamRequest::set_allocated_sourcetype(std::string* sourcetype) {
  if (sourcetype != nullptr) {
    
  } else {
    
  }
  sourcetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcetype);
  // @@protoc_insertion_point(field_set_allocated:RegisterPhysicalStreamRequest.sourceType)
}

// string sourceConf = 3;
inline void RegisterPhysicalStreamRequest::clear_sourceconf() {
  sourceconf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPhysicalStreamRequest::sourceconf() const {
  // @@protoc_insertion_point(field_get:RegisterPhysicalStreamRequest.sourceConf)
  return _internal_sourceconf();
}
inline void RegisterPhysicalStreamRequest::set_sourceconf(const std::string& value) {
  _internal_set_sourceconf(value);
  // @@protoc_insertion_point(field_set:RegisterPhysicalStreamRequest.sourceConf)
}
inline std::string* RegisterPhysicalStreamRequest::mutable_sourceconf() {
  // @@protoc_insertion_point(field_mutable:RegisterPhysicalStreamRequest.sourceConf)
  return _internal_mutable_sourceconf();
}
inline const std::string& RegisterPhysicalStreamRequest::_internal_sourceconf() const {
  return sourceconf_.GetNoArena();
}
inline void RegisterPhysicalStreamRequest::_internal_set_sourceconf(const std::string& value) {
  
  sourceconf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPhysicalStreamRequest::set_sourceconf(std::string&& value) {
  
  sourceconf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterPhysicalStreamRequest.sourceConf)
}
inline void RegisterPhysicalStreamRequest::set_sourceconf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourceconf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterPhysicalStreamRequest.sourceConf)
}
inline void RegisterPhysicalStreamRequest::set_sourceconf(const char* value, size_t size) {
  
  sourceconf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterPhysicalStreamRequest.sourceConf)
}
inline std::string* RegisterPhysicalStreamRequest::_internal_mutable_sourceconf() {
  
  return sourceconf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPhysicalStreamRequest::release_sourceconf() {
  // @@protoc_insertion_point(field_release:RegisterPhysicalStreamRequest.sourceConf)
  
  return sourceconf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPhysicalStreamRequest::set_allocated_sourceconf(std::string* sourceconf) {
  if (sourceconf != nullptr) {
    
  } else {
    
  }
  sourceconf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceconf);
  // @@protoc_insertion_point(field_set_allocated:RegisterPhysicalStreamRequest.sourceConf)
}

// int64 sourceFrequency = 4;
inline void RegisterPhysicalStreamRequest::clear_sourcefrequency() {
  sourcefrequency_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterPhysicalStreamRequest::_internal_sourcefrequency() const {
  return sourcefrequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterPhysicalStreamRequest::sourcefrequency() const {
  // @@protoc_insertion_point(field_get:RegisterPhysicalStreamRequest.sourceFrequency)
  return _internal_sourcefrequency();
}
inline void RegisterPhysicalStreamRequest::_internal_set_sourcefrequency(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sourcefrequency_ = value;
}
inline void RegisterPhysicalStreamRequest::set_sourcefrequency(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sourcefrequency(value);
  // @@protoc_insertion_point(field_set:RegisterPhysicalStreamRequest.sourceFrequency)
}

// int64 numberOfBuffersToProduce = 5;
inline void RegisterPhysicalStreamRequest::clear_numberofbufferstoproduce() {
  numberofbufferstoproduce_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterPhysicalStreamRequest::_internal_numberofbufferstoproduce() const {
  return numberofbufferstoproduce_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterPhysicalStreamRequest::numberofbufferstoproduce() const {
  // @@protoc_insertion_point(field_get:RegisterPhysicalStreamRequest.numberOfBuffersToProduce)
  return _internal_numberofbufferstoproduce();
}
inline void RegisterPhysicalStreamRequest::_internal_set_numberofbufferstoproduce(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numberofbufferstoproduce_ = value;
}
inline void RegisterPhysicalStreamRequest::set_numberofbufferstoproduce(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_numberofbufferstoproduce(value);
  // @@protoc_insertion_point(field_set:RegisterPhysicalStreamRequest.numberOfBuffersToProduce)
}

// string physicalStreamName = 6;
inline void RegisterPhysicalStreamRequest::clear_physicalstreamname() {
  physicalstreamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPhysicalStreamRequest::physicalstreamname() const {
  // @@protoc_insertion_point(field_get:RegisterPhysicalStreamRequest.physicalStreamName)
  return _internal_physicalstreamname();
}
inline void RegisterPhysicalStreamRequest::set_physicalstreamname(const std::string& value) {
  _internal_set_physicalstreamname(value);
  // @@protoc_insertion_point(field_set:RegisterPhysicalStreamRequest.physicalStreamName)
}
inline std::string* RegisterPhysicalStreamRequest::mutable_physicalstreamname() {
  // @@protoc_insertion_point(field_mutable:RegisterPhysicalStreamRequest.physicalStreamName)
  return _internal_mutable_physicalstreamname();
}
inline const std::string& RegisterPhysicalStreamRequest::_internal_physicalstreamname() const {
  return physicalstreamname_.GetNoArena();
}
inline void RegisterPhysicalStreamRequest::_internal_set_physicalstreamname(const std::string& value) {
  
  physicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPhysicalStreamRequest::set_physicalstreamname(std::string&& value) {
  
  physicalstreamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterPhysicalStreamRequest.physicalStreamName)
}
inline void RegisterPhysicalStreamRequest::set_physicalstreamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  physicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterPhysicalStreamRequest.physicalStreamName)
}
inline void RegisterPhysicalStreamRequest::set_physicalstreamname(const char* value, size_t size) {
  
  physicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterPhysicalStreamRequest.physicalStreamName)
}
inline std::string* RegisterPhysicalStreamRequest::_internal_mutable_physicalstreamname() {
  
  return physicalstreamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPhysicalStreamRequest::release_physicalstreamname() {
  // @@protoc_insertion_point(field_release:RegisterPhysicalStreamRequest.physicalStreamName)
  
  return physicalstreamname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPhysicalStreamRequest::set_allocated_physicalstreamname(std::string* physicalstreamname) {
  if (physicalstreamname != nullptr) {
    
  } else {
    
  }
  physicalstreamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), physicalstreamname);
  // @@protoc_insertion_point(field_set_allocated:RegisterPhysicalStreamRequest.physicalStreamName)
}

// string logicalStreamName = 7;
inline void RegisterPhysicalStreamRequest::clear_logicalstreamname() {
  logicalstreamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPhysicalStreamRequest::logicalstreamname() const {
  // @@protoc_insertion_point(field_get:RegisterPhysicalStreamRequest.logicalStreamName)
  return _internal_logicalstreamname();
}
inline void RegisterPhysicalStreamRequest::set_logicalstreamname(const std::string& value) {
  _internal_set_logicalstreamname(value);
  // @@protoc_insertion_point(field_set:RegisterPhysicalStreamRequest.logicalStreamName)
}
inline std::string* RegisterPhysicalStreamRequest::mutable_logicalstreamname() {
  // @@protoc_insertion_point(field_mutable:RegisterPhysicalStreamRequest.logicalStreamName)
  return _internal_mutable_logicalstreamname();
}
inline const std::string& RegisterPhysicalStreamRequest::_internal_logicalstreamname() const {
  return logicalstreamname_.GetNoArena();
}
inline void RegisterPhysicalStreamRequest::_internal_set_logicalstreamname(const std::string& value) {
  
  logicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPhysicalStreamRequest::set_logicalstreamname(std::string&& value) {
  
  logicalstreamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterPhysicalStreamRequest.logicalStreamName)
}
inline void RegisterPhysicalStreamRequest::set_logicalstreamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterPhysicalStreamRequest.logicalStreamName)
}
inline void RegisterPhysicalStreamRequest::set_logicalstreamname(const char* value, size_t size) {
  
  logicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterPhysicalStreamRequest.logicalStreamName)
}
inline std::string* RegisterPhysicalStreamRequest::_internal_mutable_logicalstreamname() {
  
  return logicalstreamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPhysicalStreamRequest::release_logicalstreamname() {
  // @@protoc_insertion_point(field_release:RegisterPhysicalStreamRequest.logicalStreamName)
  
  return logicalstreamname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPhysicalStreamRequest::set_allocated_logicalstreamname(std::string* logicalstreamname) {
  if (logicalstreamname != nullptr) {
    
  } else {
    
  }
  logicalstreamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logicalstreamname);
  // @@protoc_insertion_point(field_set_allocated:RegisterPhysicalStreamRequest.logicalStreamName)
}

// -------------------------------------------------------------------

// RegisterPhysicalStreamReply

// bool success = 1;
inline void RegisterPhysicalStreamReply::clear_success() {
  success_ = false;
}
inline bool RegisterPhysicalStreamReply::_internal_success() const {
  return success_;
}
inline bool RegisterPhysicalStreamReply::success() const {
  // @@protoc_insertion_point(field_get:RegisterPhysicalStreamReply.success)
  return _internal_success();
}
inline void RegisterPhysicalStreamReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterPhysicalStreamReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RegisterPhysicalStreamReply.success)
}

// -------------------------------------------------------------------

// UnregisterPhysicalStreamRequest

// int64 id = 1;
inline void UnregisterPhysicalStreamRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnregisterPhysicalStreamRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnregisterPhysicalStreamRequest::id() const {
  // @@protoc_insertion_point(field_get:UnregisterPhysicalStreamRequest.id)
  return _internal_id();
}
inline void UnregisterPhysicalStreamRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UnregisterPhysicalStreamRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UnregisterPhysicalStreamRequest.id)
}

// string physicalStreamName = 2;
inline void UnregisterPhysicalStreamRequest::clear_physicalstreamname() {
  physicalstreamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnregisterPhysicalStreamRequest::physicalstreamname() const {
  // @@protoc_insertion_point(field_get:UnregisterPhysicalStreamRequest.physicalStreamName)
  return _internal_physicalstreamname();
}
inline void UnregisterPhysicalStreamRequest::set_physicalstreamname(const std::string& value) {
  _internal_set_physicalstreamname(value);
  // @@protoc_insertion_point(field_set:UnregisterPhysicalStreamRequest.physicalStreamName)
}
inline std::string* UnregisterPhysicalStreamRequest::mutable_physicalstreamname() {
  // @@protoc_insertion_point(field_mutable:UnregisterPhysicalStreamRequest.physicalStreamName)
  return _internal_mutable_physicalstreamname();
}
inline const std::string& UnregisterPhysicalStreamRequest::_internal_physicalstreamname() const {
  return physicalstreamname_.GetNoArena();
}
inline void UnregisterPhysicalStreamRequest::_internal_set_physicalstreamname(const std::string& value) {
  
  physicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnregisterPhysicalStreamRequest::set_physicalstreamname(std::string&& value) {
  
  physicalstreamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UnregisterPhysicalStreamRequest.physicalStreamName)
}
inline void UnregisterPhysicalStreamRequest::set_physicalstreamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  physicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnregisterPhysicalStreamRequest.physicalStreamName)
}
inline void UnregisterPhysicalStreamRequest::set_physicalstreamname(const char* value, size_t size) {
  
  physicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnregisterPhysicalStreamRequest.physicalStreamName)
}
inline std::string* UnregisterPhysicalStreamRequest::_internal_mutable_physicalstreamname() {
  
  return physicalstreamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnregisterPhysicalStreamRequest::release_physicalstreamname() {
  // @@protoc_insertion_point(field_release:UnregisterPhysicalStreamRequest.physicalStreamName)
  
  return physicalstreamname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnregisterPhysicalStreamRequest::set_allocated_physicalstreamname(std::string* physicalstreamname) {
  if (physicalstreamname != nullptr) {
    
  } else {
    
  }
  physicalstreamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), physicalstreamname);
  // @@protoc_insertion_point(field_set_allocated:UnregisterPhysicalStreamRequest.physicalStreamName)
}

// string logicalStreamName = 3;
inline void UnregisterPhysicalStreamRequest::clear_logicalstreamname() {
  logicalstreamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnregisterPhysicalStreamRequest::logicalstreamname() const {
  // @@protoc_insertion_point(field_get:UnregisterPhysicalStreamRequest.logicalStreamName)
  return _internal_logicalstreamname();
}
inline void UnregisterPhysicalStreamRequest::set_logicalstreamname(const std::string& value) {
  _internal_set_logicalstreamname(value);
  // @@protoc_insertion_point(field_set:UnregisterPhysicalStreamRequest.logicalStreamName)
}
inline std::string* UnregisterPhysicalStreamRequest::mutable_logicalstreamname() {
  // @@protoc_insertion_point(field_mutable:UnregisterPhysicalStreamRequest.logicalStreamName)
  return _internal_mutable_logicalstreamname();
}
inline const std::string& UnregisterPhysicalStreamRequest::_internal_logicalstreamname() const {
  return logicalstreamname_.GetNoArena();
}
inline void UnregisterPhysicalStreamRequest::_internal_set_logicalstreamname(const std::string& value) {
  
  logicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnregisterPhysicalStreamRequest::set_logicalstreamname(std::string&& value) {
  
  logicalstreamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UnregisterPhysicalStreamRequest.logicalStreamName)
}
inline void UnregisterPhysicalStreamRequest::set_logicalstreamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnregisterPhysicalStreamRequest.logicalStreamName)
}
inline void UnregisterPhysicalStreamRequest::set_logicalstreamname(const char* value, size_t size) {
  
  logicalstreamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnregisterPhysicalStreamRequest.logicalStreamName)
}
inline std::string* UnregisterPhysicalStreamRequest::_internal_mutable_logicalstreamname() {
  
  return logicalstreamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnregisterPhysicalStreamRequest::release_logicalstreamname() {
  // @@protoc_insertion_point(field_release:UnregisterPhysicalStreamRequest.logicalStreamName)
  
  return logicalstreamname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnregisterPhysicalStreamRequest::set_allocated_logicalstreamname(std::string* logicalstreamname) {
  if (logicalstreamname != nullptr) {
    
  } else {
    
  }
  logicalstreamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logicalstreamname);
  // @@protoc_insertion_point(field_set_allocated:UnregisterPhysicalStreamRequest.logicalStreamName)
}

// -------------------------------------------------------------------

// UnregisterPhysicalStreamReply

// bool success = 1;
inline void UnregisterPhysicalStreamReply::clear_success() {
  success_ = false;
}
inline bool UnregisterPhysicalStreamReply::_internal_success() const {
  return success_;
}
inline bool UnregisterPhysicalStreamReply::success() const {
  // @@protoc_insertion_point(field_get:UnregisterPhysicalStreamReply.success)
  return _internal_success();
}
inline void UnregisterPhysicalStreamReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UnregisterPhysicalStreamReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:UnregisterPhysicalStreamReply.success)
}

// -------------------------------------------------------------------

// RegisterLogicalStreamRequest

// int64 id = 1;
inline void RegisterLogicalStreamRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterLogicalStreamRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisterLogicalStreamRequest::id() const {
  // @@protoc_insertion_point(field_get:RegisterLogicalStreamRequest.id)
  return _internal_id();
}
inline void RegisterLogicalStreamRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void RegisterLogicalStreamRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RegisterLogicalStreamRequest.id)
}

// string streamName = 2;
inline void RegisterLogicalStreamRequest::clear_streamname() {
  streamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterLogicalStreamRequest::streamname() const {
  // @@protoc_insertion_point(field_get:RegisterLogicalStreamRequest.streamName)
  return _internal_streamname();
}
inline void RegisterLogicalStreamRequest::set_streamname(const std::string& value) {
  _internal_set_streamname(value);
  // @@protoc_insertion_point(field_set:RegisterLogicalStreamRequest.streamName)
}
inline std::string* RegisterLogicalStreamRequest::mutable_streamname() {
  // @@protoc_insertion_point(field_mutable:RegisterLogicalStreamRequest.streamName)
  return _internal_mutable_streamname();
}
inline const std::string& RegisterLogicalStreamRequest::_internal_streamname() const {
  return streamname_.GetNoArena();
}
inline void RegisterLogicalStreamRequest::_internal_set_streamname(const std::string& value) {
  
  streamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterLogicalStreamRequest::set_streamname(std::string&& value) {
  
  streamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterLogicalStreamRequest.streamName)
}
inline void RegisterLogicalStreamRequest::set_streamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterLogicalStreamRequest.streamName)
}
inline void RegisterLogicalStreamRequest::set_streamname(const char* value, size_t size) {
  
  streamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterLogicalStreamRequest.streamName)
}
inline std::string* RegisterLogicalStreamRequest::_internal_mutable_streamname() {
  
  return streamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterLogicalStreamRequest::release_streamname() {
  // @@protoc_insertion_point(field_release:RegisterLogicalStreamRequest.streamName)
  
  return streamname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterLogicalStreamRequest::set_allocated_streamname(std::string* streamname) {
  if (streamname != nullptr) {
    
  } else {
    
  }
  streamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamname);
  // @@protoc_insertion_point(field_set_allocated:RegisterLogicalStreamRequest.streamName)
}

// string streamSchema = 3;
inline void RegisterLogicalStreamRequest::clear_streamschema() {
  streamschema_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterLogicalStreamRequest::streamschema() const {
  // @@protoc_insertion_point(field_get:RegisterLogicalStreamRequest.streamSchema)
  return _internal_streamschema();
}
inline void RegisterLogicalStreamRequest::set_streamschema(const std::string& value) {
  _internal_set_streamschema(value);
  // @@protoc_insertion_point(field_set:RegisterLogicalStreamRequest.streamSchema)
}
inline std::string* RegisterLogicalStreamRequest::mutable_streamschema() {
  // @@protoc_insertion_point(field_mutable:RegisterLogicalStreamRequest.streamSchema)
  return _internal_mutable_streamschema();
}
inline const std::string& RegisterLogicalStreamRequest::_internal_streamschema() const {
  return streamschema_.GetNoArena();
}
inline void RegisterLogicalStreamRequest::_internal_set_streamschema(const std::string& value) {
  
  streamschema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterLogicalStreamRequest::set_streamschema(std::string&& value) {
  
  streamschema_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterLogicalStreamRequest.streamSchema)
}
inline void RegisterLogicalStreamRequest::set_streamschema(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamschema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterLogicalStreamRequest.streamSchema)
}
inline void RegisterLogicalStreamRequest::set_streamschema(const char* value, size_t size) {
  
  streamschema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterLogicalStreamRequest.streamSchema)
}
inline std::string* RegisterLogicalStreamRequest::_internal_mutable_streamschema() {
  
  return streamschema_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterLogicalStreamRequest::release_streamschema() {
  // @@protoc_insertion_point(field_release:RegisterLogicalStreamRequest.streamSchema)
  
  return streamschema_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterLogicalStreamRequest::set_allocated_streamschema(std::string* streamschema) {
  if (streamschema != nullptr) {
    
  } else {
    
  }
  streamschema_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamschema);
  // @@protoc_insertion_point(field_set_allocated:RegisterLogicalStreamRequest.streamSchema)
}

// -------------------------------------------------------------------

// RegisterLogicalStreamReply

// bool success = 1;
inline void RegisterLogicalStreamReply::clear_success() {
  success_ = false;
}
inline bool RegisterLogicalStreamReply::_internal_success() const {
  return success_;
}
inline bool RegisterLogicalStreamReply::success() const {
  // @@protoc_insertion_point(field_get:RegisterLogicalStreamReply.success)
  return _internal_success();
}
inline void RegisterLogicalStreamReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterLogicalStreamReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RegisterLogicalStreamReply.success)
}

// -------------------------------------------------------------------

// UnregisterLogicalStreamRequest

// int64 id = 1;
inline void UnregisterLogicalStreamRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnregisterLogicalStreamRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnregisterLogicalStreamRequest::id() const {
  // @@protoc_insertion_point(field_get:UnregisterLogicalStreamRequest.id)
  return _internal_id();
}
inline void UnregisterLogicalStreamRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UnregisterLogicalStreamRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UnregisterLogicalStreamRequest.id)
}

// string streamName = 2;
inline void UnregisterLogicalStreamRequest::clear_streamname() {
  streamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnregisterLogicalStreamRequest::streamname() const {
  // @@protoc_insertion_point(field_get:UnregisterLogicalStreamRequest.streamName)
  return _internal_streamname();
}
inline void UnregisterLogicalStreamRequest::set_streamname(const std::string& value) {
  _internal_set_streamname(value);
  // @@protoc_insertion_point(field_set:UnregisterLogicalStreamRequest.streamName)
}
inline std::string* UnregisterLogicalStreamRequest::mutable_streamname() {
  // @@protoc_insertion_point(field_mutable:UnregisterLogicalStreamRequest.streamName)
  return _internal_mutable_streamname();
}
inline const std::string& UnregisterLogicalStreamRequest::_internal_streamname() const {
  return streamname_.GetNoArena();
}
inline void UnregisterLogicalStreamRequest::_internal_set_streamname(const std::string& value) {
  
  streamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnregisterLogicalStreamRequest::set_streamname(std::string&& value) {
  
  streamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UnregisterLogicalStreamRequest.streamName)
}
inline void UnregisterLogicalStreamRequest::set_streamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnregisterLogicalStreamRequest.streamName)
}
inline void UnregisterLogicalStreamRequest::set_streamname(const char* value, size_t size) {
  
  streamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnregisterLogicalStreamRequest.streamName)
}
inline std::string* UnregisterLogicalStreamRequest::_internal_mutable_streamname() {
  
  return streamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnregisterLogicalStreamRequest::release_streamname() {
  // @@protoc_insertion_point(field_release:UnregisterLogicalStreamRequest.streamName)
  
  return streamname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnregisterLogicalStreamRequest::set_allocated_streamname(std::string* streamname) {
  if (streamname != nullptr) {
    
  } else {
    
  }
  streamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamname);
  // @@protoc_insertion_point(field_set_allocated:UnregisterLogicalStreamRequest.streamName)
}

// -------------------------------------------------------------------

// UnregisterLogicalStreamReply

// bool success = 1;
inline void UnregisterLogicalStreamReply::clear_success() {
  success_ = false;
}
inline bool UnregisterLogicalStreamReply::_internal_success() const {
  return success_;
}
inline bool UnregisterLogicalStreamReply::success() const {
  // @@protoc_insertion_point(field_get:UnregisterLogicalStreamReply.success)
  return _internal_success();
}
inline void UnregisterLogicalStreamReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UnregisterLogicalStreamReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:UnregisterLogicalStreamReply.success)
}

// -------------------------------------------------------------------

// AddParentRequest

// string childId = 1;
inline void AddParentRequest::clear_childid() {
  childid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddParentRequest::childid() const {
  // @@protoc_insertion_point(field_get:AddParentRequest.childId)
  return _internal_childid();
}
inline void AddParentRequest::set_childid(const std::string& value) {
  _internal_set_childid(value);
  // @@protoc_insertion_point(field_set:AddParentRequest.childId)
}
inline std::string* AddParentRequest::mutable_childid() {
  // @@protoc_insertion_point(field_mutable:AddParentRequest.childId)
  return _internal_mutable_childid();
}
inline const std::string& AddParentRequest::_internal_childid() const {
  return childid_.GetNoArena();
}
inline void AddParentRequest::_internal_set_childid(const std::string& value) {
  
  childid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddParentRequest::set_childid(std::string&& value) {
  
  childid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddParentRequest.childId)
}
inline void AddParentRequest::set_childid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  childid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddParentRequest.childId)
}
inline void AddParentRequest::set_childid(const char* value, size_t size) {
  
  childid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddParentRequest.childId)
}
inline std::string* AddParentRequest::_internal_mutable_childid() {
  
  return childid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddParentRequest::release_childid() {
  // @@protoc_insertion_point(field_release:AddParentRequest.childId)
  
  return childid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddParentRequest::set_allocated_childid(std::string* childid) {
  if (childid != nullptr) {
    
  } else {
    
  }
  childid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), childid);
  // @@protoc_insertion_point(field_set_allocated:AddParentRequest.childId)
}

// string parentId = 2;
inline void AddParentRequest::clear_parentid() {
  parentid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddParentRequest::parentid() const {
  // @@protoc_insertion_point(field_get:AddParentRequest.parentId)
  return _internal_parentid();
}
inline void AddParentRequest::set_parentid(const std::string& value) {
  _internal_set_parentid(value);
  // @@protoc_insertion_point(field_set:AddParentRequest.parentId)
}
inline std::string* AddParentRequest::mutable_parentid() {
  // @@protoc_insertion_point(field_mutable:AddParentRequest.parentId)
  return _internal_mutable_parentid();
}
inline const std::string& AddParentRequest::_internal_parentid() const {
  return parentid_.GetNoArena();
}
inline void AddParentRequest::_internal_set_parentid(const std::string& value) {
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddParentRequest::set_parentid(std::string&& value) {
  
  parentid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddParentRequest.parentId)
}
inline void AddParentRequest::set_parentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddParentRequest.parentId)
}
inline void AddParentRequest::set_parentid(const char* value, size_t size) {
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddParentRequest.parentId)
}
inline std::string* AddParentRequest::_internal_mutable_parentid() {
  
  return parentid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddParentRequest::release_parentid() {
  // @@protoc_insertion_point(field_release:AddParentRequest.parentId)
  
  return parentid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddParentRequest::set_allocated_parentid(std::string* parentid) {
  if (parentid != nullptr) {
    
  } else {
    
  }
  parentid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentid);
  // @@protoc_insertion_point(field_set_allocated:AddParentRequest.parentId)
}

// -------------------------------------------------------------------

// AddParentReply

// bool success = 1;
inline void AddParentReply::clear_success() {
  success_ = false;
}
inline bool AddParentReply::_internal_success() const {
  return success_;
}
inline bool AddParentReply::success() const {
  // @@protoc_insertion_point(field_get:AddParentReply.success)
  return _internal_success();
}
inline void AddParentReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AddParentReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:AddParentReply.success)
}

// -------------------------------------------------------------------

// RemoveParentRequest

// string childId = 1;
inline void RemoveParentRequest::clear_childid() {
  childid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveParentRequest::childid() const {
  // @@protoc_insertion_point(field_get:RemoveParentRequest.childId)
  return _internal_childid();
}
inline void RemoveParentRequest::set_childid(const std::string& value) {
  _internal_set_childid(value);
  // @@protoc_insertion_point(field_set:RemoveParentRequest.childId)
}
inline std::string* RemoveParentRequest::mutable_childid() {
  // @@protoc_insertion_point(field_mutable:RemoveParentRequest.childId)
  return _internal_mutable_childid();
}
inline const std::string& RemoveParentRequest::_internal_childid() const {
  return childid_.GetNoArena();
}
inline void RemoveParentRequest::_internal_set_childid(const std::string& value) {
  
  childid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveParentRequest::set_childid(std::string&& value) {
  
  childid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoveParentRequest.childId)
}
inline void RemoveParentRequest::set_childid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  childid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoveParentRequest.childId)
}
inline void RemoveParentRequest::set_childid(const char* value, size_t size) {
  
  childid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoveParentRequest.childId)
}
inline std::string* RemoveParentRequest::_internal_mutable_childid() {
  
  return childid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveParentRequest::release_childid() {
  // @@protoc_insertion_point(field_release:RemoveParentRequest.childId)
  
  return childid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveParentRequest::set_allocated_childid(std::string* childid) {
  if (childid != nullptr) {
    
  } else {
    
  }
  childid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), childid);
  // @@protoc_insertion_point(field_set_allocated:RemoveParentRequest.childId)
}

// string parentId = 2;
inline void RemoveParentRequest::clear_parentid() {
  parentid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveParentRequest::parentid() const {
  // @@protoc_insertion_point(field_get:RemoveParentRequest.parentId)
  return _internal_parentid();
}
inline void RemoveParentRequest::set_parentid(const std::string& value) {
  _internal_set_parentid(value);
  // @@protoc_insertion_point(field_set:RemoveParentRequest.parentId)
}
inline std::string* RemoveParentRequest::mutable_parentid() {
  // @@protoc_insertion_point(field_mutable:RemoveParentRequest.parentId)
  return _internal_mutable_parentid();
}
inline const std::string& RemoveParentRequest::_internal_parentid() const {
  return parentid_.GetNoArena();
}
inline void RemoveParentRequest::_internal_set_parentid(const std::string& value) {
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveParentRequest::set_parentid(std::string&& value) {
  
  parentid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoveParentRequest.parentId)
}
inline void RemoveParentRequest::set_parentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoveParentRequest.parentId)
}
inline void RemoveParentRequest::set_parentid(const char* value, size_t size) {
  
  parentid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoveParentRequest.parentId)
}
inline std::string* RemoveParentRequest::_internal_mutable_parentid() {
  
  return parentid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveParentRequest::release_parentid() {
  // @@protoc_insertion_point(field_release:RemoveParentRequest.parentId)
  
  return parentid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveParentRequest::set_allocated_parentid(std::string* parentid) {
  if (parentid != nullptr) {
    
  } else {
    
  }
  parentid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentid);
  // @@protoc_insertion_point(field_set_allocated:RemoveParentRequest.parentId)
}

// -------------------------------------------------------------------

// RemoveParentReply

// bool success = 1;
inline void RemoveParentReply::clear_success() {
  success_ = false;
}
inline bool RemoveParentReply::_internal_success() const {
  return success_;
}
inline bool RemoveParentReply::success() const {
  // @@protoc_insertion_point(field_get:RemoveParentReply.success)
  return _internal_success();
}
inline void RemoveParentReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RemoveParentReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RemoveParentReply.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Coordinator_2eproto
