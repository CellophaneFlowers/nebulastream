// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkerRPCService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WorkerRPCService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WorkerRPCService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WorkerRPCService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WorkerRPCService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WorkerRPCService_2eproto;
class DeployQueryReply;
class DeployQueryReplyDefaultTypeInternal;
extern DeployQueryReplyDefaultTypeInternal _DeployQueryReply_default_instance_;
class DeployQueryRequest;
class DeployQueryRequestDefaultTypeInternal;
extern DeployQueryRequestDefaultTypeInternal _DeployQueryRequest_default_instance_;
class RegisterQueryReply;
class RegisterQueryReplyDefaultTypeInternal;
extern RegisterQueryReplyDefaultTypeInternal _RegisterQueryReply_default_instance_;
class RegisterQueryRequest;
class RegisterQueryRequestDefaultTypeInternal;
extern RegisterQueryRequestDefaultTypeInternal _RegisterQueryRequest_default_instance_;
class StartQueryReply;
class StartQueryReplyDefaultTypeInternal;
extern StartQueryReplyDefaultTypeInternal _StartQueryReply_default_instance_;
class StartQueryRequest;
class StartQueryRequestDefaultTypeInternal;
extern StartQueryRequestDefaultTypeInternal _StartQueryRequest_default_instance_;
class StopQueryReply;
class StopQueryReplyDefaultTypeInternal;
extern StopQueryReplyDefaultTypeInternal _StopQueryReply_default_instance_;
class StopQueryRequest;
class StopQueryRequestDefaultTypeInternal;
extern StopQueryRequestDefaultTypeInternal _StopQueryRequest_default_instance_;
class UndeployQueryReply;
class UndeployQueryReplyDefaultTypeInternal;
extern UndeployQueryReplyDefaultTypeInternal _UndeployQueryReply_default_instance_;
class UndeployQueryRequest;
class UndeployQueryRequestDefaultTypeInternal;
extern UndeployQueryRequestDefaultTypeInternal _UndeployQueryRequest_default_instance_;
class UnregisterQueryReply;
class UnregisterQueryReplyDefaultTypeInternal;
extern UnregisterQueryReplyDefaultTypeInternal _UnregisterQueryReply_default_instance_;
class UnregisterQueryRequest;
class UnregisterQueryRequestDefaultTypeInternal;
extern UnregisterQueryRequestDefaultTypeInternal _UnregisterQueryRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DeployQueryReply* Arena::CreateMaybeMessage<::DeployQueryReply>(Arena*);
template<> ::DeployQueryRequest* Arena::CreateMaybeMessage<::DeployQueryRequest>(Arena*);
template<> ::RegisterQueryReply* Arena::CreateMaybeMessage<::RegisterQueryReply>(Arena*);
template<> ::RegisterQueryRequest* Arena::CreateMaybeMessage<::RegisterQueryRequest>(Arena*);
template<> ::StartQueryReply* Arena::CreateMaybeMessage<::StartQueryReply>(Arena*);
template<> ::StartQueryRequest* Arena::CreateMaybeMessage<::StartQueryRequest>(Arena*);
template<> ::StopQueryReply* Arena::CreateMaybeMessage<::StopQueryReply>(Arena*);
template<> ::StopQueryRequest* Arena::CreateMaybeMessage<::StopQueryRequest>(Arena*);
template<> ::UndeployQueryReply* Arena::CreateMaybeMessage<::UndeployQueryReply>(Arena*);
template<> ::UndeployQueryRequest* Arena::CreateMaybeMessage<::UndeployQueryRequest>(Arena*);
template<> ::UnregisterQueryReply* Arena::CreateMaybeMessage<::UnregisterQueryReply>(Arena*);
template<> ::UnregisterQueryRequest* Arena::CreateMaybeMessage<::UnregisterQueryRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DeployQueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeployQueryRequest) */ {
 public:
  DeployQueryRequest();
  virtual ~DeployQueryRequest();

  DeployQueryRequest(const DeployQueryRequest& from);
  DeployQueryRequest(DeployQueryRequest&& from) noexcept
    : DeployQueryRequest() {
    *this = ::std::move(from);
  }

  inline DeployQueryRequest& operator=(const DeployQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployQueryRequest& operator=(DeployQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeployQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeployQueryRequest* internal_default_instance() {
    return reinterpret_cast<const DeployQueryRequest*>(
               &_DeployQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeployQueryRequest& a, DeployQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployQueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeployQueryRequest* New() const final {
    return CreateMaybeMessage<DeployQueryRequest>(nullptr);
  }

  DeployQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeployQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeployQueryRequest& from);
  void MergeFrom(const DeployQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeployQueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEtoFieldNumber = 1,
  };
  // string eto = 1;
  void clear_eto();
  const std::string& eto() const;
  void set_eto(const std::string& value);
  void set_eto(std::string&& value);
  void set_eto(const char* value);
  void set_eto(const char* value, size_t size);
  std::string* mutable_eto();
  std::string* release_eto();
  void set_allocated_eto(std::string* eto);
  private:
  const std::string& _internal_eto() const;
  void _internal_set_eto(const std::string& value);
  std::string* _internal_mutable_eto();
  public:

  // @@protoc_insertion_point(class_scope:DeployQueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eto_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class DeployQueryReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeployQueryReply) */ {
 public:
  DeployQueryReply();
  virtual ~DeployQueryReply();

  DeployQueryReply(const DeployQueryReply& from);
  DeployQueryReply(DeployQueryReply&& from) noexcept
    : DeployQueryReply() {
    *this = ::std::move(from);
  }

  inline DeployQueryReply& operator=(const DeployQueryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployQueryReply& operator=(DeployQueryReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeployQueryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeployQueryReply* internal_default_instance() {
    return reinterpret_cast<const DeployQueryReply*>(
               &_DeployQueryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeployQueryReply& a, DeployQueryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployQueryReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeployQueryReply* New() const final {
    return CreateMaybeMessage<DeployQueryReply>(nullptr);
  }

  DeployQueryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeployQueryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeployQueryReply& from);
  void MergeFrom(const DeployQueryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployQueryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeployQueryReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DeployQueryReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class UndeployQueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UndeployQueryRequest) */ {
 public:
  UndeployQueryRequest();
  virtual ~UndeployQueryRequest();

  UndeployQueryRequest(const UndeployQueryRequest& from);
  UndeployQueryRequest(UndeployQueryRequest&& from) noexcept
    : UndeployQueryRequest() {
    *this = ::std::move(from);
  }

  inline UndeployQueryRequest& operator=(const UndeployQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndeployQueryRequest& operator=(UndeployQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UndeployQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UndeployQueryRequest* internal_default_instance() {
    return reinterpret_cast<const UndeployQueryRequest*>(
               &_UndeployQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UndeployQueryRequest& a, UndeployQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UndeployQueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndeployQueryRequest* New() const final {
    return CreateMaybeMessage<UndeployQueryRequest>(nullptr);
  }

  UndeployQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndeployQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndeployQueryRequest& from);
  void MergeFrom(const UndeployQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndeployQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UndeployQueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryIdFieldNumber = 1,
  };
  // string queryId = 1;
  void clear_queryid();
  const std::string& queryid() const;
  void set_queryid(const std::string& value);
  void set_queryid(std::string&& value);
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  std::string* mutable_queryid();
  std::string* release_queryid();
  void set_allocated_queryid(std::string* queryid);
  private:
  const std::string& _internal_queryid() const;
  void _internal_set_queryid(const std::string& value);
  std::string* _internal_mutable_queryid();
  public:

  // @@protoc_insertion_point(class_scope:UndeployQueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queryid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class UndeployQueryReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UndeployQueryReply) */ {
 public:
  UndeployQueryReply();
  virtual ~UndeployQueryReply();

  UndeployQueryReply(const UndeployQueryReply& from);
  UndeployQueryReply(UndeployQueryReply&& from) noexcept
    : UndeployQueryReply() {
    *this = ::std::move(from);
  }

  inline UndeployQueryReply& operator=(const UndeployQueryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndeployQueryReply& operator=(UndeployQueryReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UndeployQueryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UndeployQueryReply* internal_default_instance() {
    return reinterpret_cast<const UndeployQueryReply*>(
               &_UndeployQueryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UndeployQueryReply& a, UndeployQueryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UndeployQueryReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndeployQueryReply* New() const final {
    return CreateMaybeMessage<UndeployQueryReply>(nullptr);
  }

  UndeployQueryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndeployQueryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndeployQueryReply& from);
  void MergeFrom(const UndeployQueryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndeployQueryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UndeployQueryReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UndeployQueryReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class RegisterQueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterQueryRequest) */ {
 public:
  RegisterQueryRequest();
  virtual ~RegisterQueryRequest();

  RegisterQueryRequest(const RegisterQueryRequest& from);
  RegisterQueryRequest(RegisterQueryRequest&& from) noexcept
    : RegisterQueryRequest() {
    *this = ::std::move(from);
  }

  inline RegisterQueryRequest& operator=(const RegisterQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterQueryRequest& operator=(RegisterQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterQueryRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterQueryRequest*>(
               &_RegisterQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterQueryRequest& a, RegisterQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterQueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterQueryRequest* New() const final {
    return CreateMaybeMessage<RegisterQueryRequest>(nullptr);
  }

  RegisterQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterQueryRequest& from);
  void MergeFrom(const RegisterQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterQueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEtoFieldNumber = 1,
  };
  // string eto = 1;
  void clear_eto();
  const std::string& eto() const;
  void set_eto(const std::string& value);
  void set_eto(std::string&& value);
  void set_eto(const char* value);
  void set_eto(const char* value, size_t size);
  std::string* mutable_eto();
  std::string* release_eto();
  void set_allocated_eto(std::string* eto);
  private:
  const std::string& _internal_eto() const;
  void _internal_set_eto(const std::string& value);
  std::string* _internal_mutable_eto();
  public:

  // @@protoc_insertion_point(class_scope:RegisterQueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eto_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class RegisterQueryReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterQueryReply) */ {
 public:
  RegisterQueryReply();
  virtual ~RegisterQueryReply();

  RegisterQueryReply(const RegisterQueryReply& from);
  RegisterQueryReply(RegisterQueryReply&& from) noexcept
    : RegisterQueryReply() {
    *this = ::std::move(from);
  }

  inline RegisterQueryReply& operator=(const RegisterQueryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterQueryReply& operator=(RegisterQueryReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterQueryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterQueryReply* internal_default_instance() {
    return reinterpret_cast<const RegisterQueryReply*>(
               &_RegisterQueryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterQueryReply& a, RegisterQueryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterQueryReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterQueryReply* New() const final {
    return CreateMaybeMessage<RegisterQueryReply>(nullptr);
  }

  RegisterQueryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterQueryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterQueryReply& from);
  void MergeFrom(const RegisterQueryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterQueryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterQueryReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterQueryReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class UnregisterQueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnregisterQueryRequest) */ {
 public:
  UnregisterQueryRequest();
  virtual ~UnregisterQueryRequest();

  UnregisterQueryRequest(const UnregisterQueryRequest& from);
  UnregisterQueryRequest(UnregisterQueryRequest&& from) noexcept
    : UnregisterQueryRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterQueryRequest& operator=(const UnregisterQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterQueryRequest& operator=(UnregisterQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterQueryRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterQueryRequest*>(
               &_UnregisterQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnregisterQueryRequest& a, UnregisterQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterQueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterQueryRequest* New() const final {
    return CreateMaybeMessage<UnregisterQueryRequest>(nullptr);
  }

  UnregisterQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterQueryRequest& from);
  void MergeFrom(const UnregisterQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnregisterQueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryIdFieldNumber = 1,
  };
  // string queryId = 1;
  void clear_queryid();
  const std::string& queryid() const;
  void set_queryid(const std::string& value);
  void set_queryid(std::string&& value);
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  std::string* mutable_queryid();
  std::string* release_queryid();
  void set_allocated_queryid(std::string* queryid);
  private:
  const std::string& _internal_queryid() const;
  void _internal_set_queryid(const std::string& value);
  std::string* _internal_mutable_queryid();
  public:

  // @@protoc_insertion_point(class_scope:UnregisterQueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queryid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class UnregisterQueryReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UnregisterQueryReply) */ {
 public:
  UnregisterQueryReply();
  virtual ~UnregisterQueryReply();

  UnregisterQueryReply(const UnregisterQueryReply& from);
  UnregisterQueryReply(UnregisterQueryReply&& from) noexcept
    : UnregisterQueryReply() {
    *this = ::std::move(from);
  }

  inline UnregisterQueryReply& operator=(const UnregisterQueryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterQueryReply& operator=(UnregisterQueryReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterQueryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterQueryReply* internal_default_instance() {
    return reinterpret_cast<const UnregisterQueryReply*>(
               &_UnregisterQueryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnregisterQueryReply& a, UnregisterQueryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterQueryReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterQueryReply* New() const final {
    return CreateMaybeMessage<UnregisterQueryReply>(nullptr);
  }

  UnregisterQueryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterQueryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterQueryReply& from);
  void MergeFrom(const UnregisterQueryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterQueryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnregisterQueryReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UnregisterQueryReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class StartQueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartQueryRequest) */ {
 public:
  StartQueryRequest();
  virtual ~StartQueryRequest();

  StartQueryRequest(const StartQueryRequest& from);
  StartQueryRequest(StartQueryRequest&& from) noexcept
    : StartQueryRequest() {
    *this = ::std::move(from);
  }

  inline StartQueryRequest& operator=(const StartQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartQueryRequest& operator=(StartQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartQueryRequest* internal_default_instance() {
    return reinterpret_cast<const StartQueryRequest*>(
               &_StartQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StartQueryRequest& a, StartQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartQueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartQueryRequest* New() const final {
    return CreateMaybeMessage<StartQueryRequest>(nullptr);
  }

  StartQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartQueryRequest& from);
  void MergeFrom(const StartQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartQueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryIdFieldNumber = 1,
  };
  // string queryId = 1;
  void clear_queryid();
  const std::string& queryid() const;
  void set_queryid(const std::string& value);
  void set_queryid(std::string&& value);
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  std::string* mutable_queryid();
  std::string* release_queryid();
  void set_allocated_queryid(std::string* queryid);
  private:
  const std::string& _internal_queryid() const;
  void _internal_set_queryid(const std::string& value);
  std::string* _internal_mutable_queryid();
  public:

  // @@protoc_insertion_point(class_scope:StartQueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queryid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class StartQueryReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartQueryReply) */ {
 public:
  StartQueryReply();
  virtual ~StartQueryReply();

  StartQueryReply(const StartQueryReply& from);
  StartQueryReply(StartQueryReply&& from) noexcept
    : StartQueryReply() {
    *this = ::std::move(from);
  }

  inline StartQueryReply& operator=(const StartQueryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartQueryReply& operator=(StartQueryReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartQueryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartQueryReply* internal_default_instance() {
    return reinterpret_cast<const StartQueryReply*>(
               &_StartQueryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StartQueryReply& a, StartQueryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StartQueryReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartQueryReply* New() const final {
    return CreateMaybeMessage<StartQueryReply>(nullptr);
  }

  StartQueryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartQueryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartQueryReply& from);
  void MergeFrom(const StartQueryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartQueryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartQueryReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:StartQueryReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class StopQueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopQueryRequest) */ {
 public:
  StopQueryRequest();
  virtual ~StopQueryRequest();

  StopQueryRequest(const StopQueryRequest& from);
  StopQueryRequest(StopQueryRequest&& from) noexcept
    : StopQueryRequest() {
    *this = ::std::move(from);
  }

  inline StopQueryRequest& operator=(const StopQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopQueryRequest& operator=(StopQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopQueryRequest* internal_default_instance() {
    return reinterpret_cast<const StopQueryRequest*>(
               &_StopQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StopQueryRequest& a, StopQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopQueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopQueryRequest* New() const final {
    return CreateMaybeMessage<StopQueryRequest>(nullptr);
  }

  StopQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopQueryRequest& from);
  void MergeFrom(const StopQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopQueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryIdFieldNumber = 1,
  };
  // string queryId = 1;
  void clear_queryid();
  const std::string& queryid() const;
  void set_queryid(const std::string& value);
  void set_queryid(std::string&& value);
  void set_queryid(const char* value);
  void set_queryid(const char* value, size_t size);
  std::string* mutable_queryid();
  std::string* release_queryid();
  void set_allocated_queryid(std::string* queryid);
  private:
  const std::string& _internal_queryid() const;
  void _internal_set_queryid(const std::string& value);
  std::string* _internal_mutable_queryid();
  public:

  // @@protoc_insertion_point(class_scope:StopQueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queryid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// -------------------------------------------------------------------

class StopQueryReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopQueryReply) */ {
 public:
  StopQueryReply();
  virtual ~StopQueryReply();

  StopQueryReply(const StopQueryReply& from);
  StopQueryReply(StopQueryReply&& from) noexcept
    : StopQueryReply() {
    *this = ::std::move(from);
  }

  inline StopQueryReply& operator=(const StopQueryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopQueryReply& operator=(StopQueryReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopQueryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopQueryReply* internal_default_instance() {
    return reinterpret_cast<const StopQueryReply*>(
               &_StopQueryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StopQueryReply& a, StopQueryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StopQueryReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopQueryReply* New() const final {
    return CreateMaybeMessage<StopQueryReply>(nullptr);
  }

  StopQueryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopQueryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopQueryReply& from);
  void MergeFrom(const StopQueryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopQueryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopQueryReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WorkerRPCService_2eproto);
    return ::descriptor_table_WorkerRPCService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:StopQueryReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WorkerRPCService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeployQueryRequest

// string eto = 1;
inline void DeployQueryRequest::clear_eto() {
  eto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeployQueryRequest::eto() const {
  // @@protoc_insertion_point(field_get:DeployQueryRequest.eto)
  return _internal_eto();
}
inline void DeployQueryRequest::set_eto(const std::string& value) {
  _internal_set_eto(value);
  // @@protoc_insertion_point(field_set:DeployQueryRequest.eto)
}
inline std::string* DeployQueryRequest::mutable_eto() {
  // @@protoc_insertion_point(field_mutable:DeployQueryRequest.eto)
  return _internal_mutable_eto();
}
inline const std::string& DeployQueryRequest::_internal_eto() const {
  return eto_.GetNoArena();
}
inline void DeployQueryRequest::_internal_set_eto(const std::string& value) {
  
  eto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeployQueryRequest::set_eto(std::string&& value) {
  
  eto_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeployQueryRequest.eto)
}
inline void DeployQueryRequest::set_eto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeployQueryRequest.eto)
}
inline void DeployQueryRequest::set_eto(const char* value, size_t size) {
  
  eto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeployQueryRequest.eto)
}
inline std::string* DeployQueryRequest::_internal_mutable_eto() {
  
  return eto_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeployQueryRequest::release_eto() {
  // @@protoc_insertion_point(field_release:DeployQueryRequest.eto)
  
  return eto_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeployQueryRequest::set_allocated_eto(std::string* eto) {
  if (eto != nullptr) {
    
  } else {
    
  }
  eto_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eto);
  // @@protoc_insertion_point(field_set_allocated:DeployQueryRequest.eto)
}

// -------------------------------------------------------------------

// DeployQueryReply

// bool success = 1;
inline void DeployQueryReply::clear_success() {
  success_ = false;
}
inline bool DeployQueryReply::_internal_success() const {
  return success_;
}
inline bool DeployQueryReply::success() const {
  // @@protoc_insertion_point(field_get:DeployQueryReply.success)
  return _internal_success();
}
inline void DeployQueryReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DeployQueryReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DeployQueryReply.success)
}

// -------------------------------------------------------------------

// UndeployQueryRequest

// string queryId = 1;
inline void UndeployQueryRequest::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UndeployQueryRequest::queryid() const {
  // @@protoc_insertion_point(field_get:UndeployQueryRequest.queryId)
  return _internal_queryid();
}
inline void UndeployQueryRequest::set_queryid(const std::string& value) {
  _internal_set_queryid(value);
  // @@protoc_insertion_point(field_set:UndeployQueryRequest.queryId)
}
inline std::string* UndeployQueryRequest::mutable_queryid() {
  // @@protoc_insertion_point(field_mutable:UndeployQueryRequest.queryId)
  return _internal_mutable_queryid();
}
inline const std::string& UndeployQueryRequest::_internal_queryid() const {
  return queryid_.GetNoArena();
}
inline void UndeployQueryRequest::_internal_set_queryid(const std::string& value) {
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UndeployQueryRequest::set_queryid(std::string&& value) {
  
  queryid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UndeployQueryRequest.queryId)
}
inline void UndeployQueryRequest::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UndeployQueryRequest.queryId)
}
inline void UndeployQueryRequest::set_queryid(const char* value, size_t size) {
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UndeployQueryRequest.queryId)
}
inline std::string* UndeployQueryRequest::_internal_mutable_queryid() {
  
  return queryid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UndeployQueryRequest::release_queryid() {
  // @@protoc_insertion_point(field_release:UndeployQueryRequest.queryId)
  
  return queryid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UndeployQueryRequest::set_allocated_queryid(std::string* queryid) {
  if (queryid != nullptr) {
    
  } else {
    
  }
  queryid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:UndeployQueryRequest.queryId)
}

// -------------------------------------------------------------------

// UndeployQueryReply

// bool success = 1;
inline void UndeployQueryReply::clear_success() {
  success_ = false;
}
inline bool UndeployQueryReply::_internal_success() const {
  return success_;
}
inline bool UndeployQueryReply::success() const {
  // @@protoc_insertion_point(field_get:UndeployQueryReply.success)
  return _internal_success();
}
inline void UndeployQueryReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UndeployQueryReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:UndeployQueryReply.success)
}

// -------------------------------------------------------------------

// RegisterQueryRequest

// string eto = 1;
inline void RegisterQueryRequest::clear_eto() {
  eto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterQueryRequest::eto() const {
  // @@protoc_insertion_point(field_get:RegisterQueryRequest.eto)
  return _internal_eto();
}
inline void RegisterQueryRequest::set_eto(const std::string& value) {
  _internal_set_eto(value);
  // @@protoc_insertion_point(field_set:RegisterQueryRequest.eto)
}
inline std::string* RegisterQueryRequest::mutable_eto() {
  // @@protoc_insertion_point(field_mutable:RegisterQueryRequest.eto)
  return _internal_mutable_eto();
}
inline const std::string& RegisterQueryRequest::_internal_eto() const {
  return eto_.GetNoArena();
}
inline void RegisterQueryRequest::_internal_set_eto(const std::string& value) {
  
  eto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterQueryRequest::set_eto(std::string&& value) {
  
  eto_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterQueryRequest.eto)
}
inline void RegisterQueryRequest::set_eto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterQueryRequest.eto)
}
inline void RegisterQueryRequest::set_eto(const char* value, size_t size) {
  
  eto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterQueryRequest.eto)
}
inline std::string* RegisterQueryRequest::_internal_mutable_eto() {
  
  return eto_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterQueryRequest::release_eto() {
  // @@protoc_insertion_point(field_release:RegisterQueryRequest.eto)
  
  return eto_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterQueryRequest::set_allocated_eto(std::string* eto) {
  if (eto != nullptr) {
    
  } else {
    
  }
  eto_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eto);
  // @@protoc_insertion_point(field_set_allocated:RegisterQueryRequest.eto)
}

// -------------------------------------------------------------------

// RegisterQueryReply

// bool success = 1;
inline void RegisterQueryReply::clear_success() {
  success_ = false;
}
inline bool RegisterQueryReply::_internal_success() const {
  return success_;
}
inline bool RegisterQueryReply::success() const {
  // @@protoc_insertion_point(field_get:RegisterQueryReply.success)
  return _internal_success();
}
inline void RegisterQueryReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterQueryReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RegisterQueryReply.success)
}

// -------------------------------------------------------------------

// UnregisterQueryRequest

// string queryId = 1;
inline void UnregisterQueryRequest::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnregisterQueryRequest::queryid() const {
  // @@protoc_insertion_point(field_get:UnregisterQueryRequest.queryId)
  return _internal_queryid();
}
inline void UnregisterQueryRequest::set_queryid(const std::string& value) {
  _internal_set_queryid(value);
  // @@protoc_insertion_point(field_set:UnregisterQueryRequest.queryId)
}
inline std::string* UnregisterQueryRequest::mutable_queryid() {
  // @@protoc_insertion_point(field_mutable:UnregisterQueryRequest.queryId)
  return _internal_mutable_queryid();
}
inline const std::string& UnregisterQueryRequest::_internal_queryid() const {
  return queryid_.GetNoArena();
}
inline void UnregisterQueryRequest::_internal_set_queryid(const std::string& value) {
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnregisterQueryRequest::set_queryid(std::string&& value) {
  
  queryid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UnregisterQueryRequest.queryId)
}
inline void UnregisterQueryRequest::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnregisterQueryRequest.queryId)
}
inline void UnregisterQueryRequest::set_queryid(const char* value, size_t size) {
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnregisterQueryRequest.queryId)
}
inline std::string* UnregisterQueryRequest::_internal_mutable_queryid() {
  
  return queryid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnregisterQueryRequest::release_queryid() {
  // @@protoc_insertion_point(field_release:UnregisterQueryRequest.queryId)
  
  return queryid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnregisterQueryRequest::set_allocated_queryid(std::string* queryid) {
  if (queryid != nullptr) {
    
  } else {
    
  }
  queryid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:UnregisterQueryRequest.queryId)
}

// -------------------------------------------------------------------

// UnregisterQueryReply

// bool success = 1;
inline void UnregisterQueryReply::clear_success() {
  success_ = false;
}
inline bool UnregisterQueryReply::_internal_success() const {
  return success_;
}
inline bool UnregisterQueryReply::success() const {
  // @@protoc_insertion_point(field_get:UnregisterQueryReply.success)
  return _internal_success();
}
inline void UnregisterQueryReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UnregisterQueryReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:UnregisterQueryReply.success)
}

// -------------------------------------------------------------------

// StartQueryRequest

// string queryId = 1;
inline void StartQueryRequest::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartQueryRequest::queryid() const {
  // @@protoc_insertion_point(field_get:StartQueryRequest.queryId)
  return _internal_queryid();
}
inline void StartQueryRequest::set_queryid(const std::string& value) {
  _internal_set_queryid(value);
  // @@protoc_insertion_point(field_set:StartQueryRequest.queryId)
}
inline std::string* StartQueryRequest::mutable_queryid() {
  // @@protoc_insertion_point(field_mutable:StartQueryRequest.queryId)
  return _internal_mutable_queryid();
}
inline const std::string& StartQueryRequest::_internal_queryid() const {
  return queryid_.GetNoArena();
}
inline void StartQueryRequest::_internal_set_queryid(const std::string& value) {
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StartQueryRequest::set_queryid(std::string&& value) {
  
  queryid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StartQueryRequest.queryId)
}
inline void StartQueryRequest::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StartQueryRequest.queryId)
}
inline void StartQueryRequest::set_queryid(const char* value, size_t size) {
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StartQueryRequest.queryId)
}
inline std::string* StartQueryRequest::_internal_mutable_queryid() {
  
  return queryid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartQueryRequest::release_queryid() {
  // @@protoc_insertion_point(field_release:StartQueryRequest.queryId)
  
  return queryid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartQueryRequest::set_allocated_queryid(std::string* queryid) {
  if (queryid != nullptr) {
    
  } else {
    
  }
  queryid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:StartQueryRequest.queryId)
}

// -------------------------------------------------------------------

// StartQueryReply

// bool success = 1;
inline void StartQueryReply::clear_success() {
  success_ = false;
}
inline bool StartQueryReply::_internal_success() const {
  return success_;
}
inline bool StartQueryReply::success() const {
  // @@protoc_insertion_point(field_get:StartQueryReply.success)
  return _internal_success();
}
inline void StartQueryReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void StartQueryReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:StartQueryReply.success)
}

// -------------------------------------------------------------------

// StopQueryRequest

// string queryId = 1;
inline void StopQueryRequest::clear_queryid() {
  queryid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StopQueryRequest::queryid() const {
  // @@protoc_insertion_point(field_get:StopQueryRequest.queryId)
  return _internal_queryid();
}
inline void StopQueryRequest::set_queryid(const std::string& value) {
  _internal_set_queryid(value);
  // @@protoc_insertion_point(field_set:StopQueryRequest.queryId)
}
inline std::string* StopQueryRequest::mutable_queryid() {
  // @@protoc_insertion_point(field_mutable:StopQueryRequest.queryId)
  return _internal_mutable_queryid();
}
inline const std::string& StopQueryRequest::_internal_queryid() const {
  return queryid_.GetNoArena();
}
inline void StopQueryRequest::_internal_set_queryid(const std::string& value) {
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StopQueryRequest::set_queryid(std::string&& value) {
  
  queryid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StopQueryRequest.queryId)
}
inline void StopQueryRequest::set_queryid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StopQueryRequest.queryId)
}
inline void StopQueryRequest::set_queryid(const char* value, size_t size) {
  
  queryid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StopQueryRequest.queryId)
}
inline std::string* StopQueryRequest::_internal_mutable_queryid() {
  
  return queryid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopQueryRequest::release_queryid() {
  // @@protoc_insertion_point(field_release:StopQueryRequest.queryId)
  
  return queryid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopQueryRequest::set_allocated_queryid(std::string* queryid) {
  if (queryid != nullptr) {
    
  } else {
    
  }
  queryid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queryid);
  // @@protoc_insertion_point(field_set_allocated:StopQueryRequest.queryId)
}

// -------------------------------------------------------------------

// StopQueryReply

// bool success = 1;
inline void StopQueryReply::clear_success() {
  success_ = false;
}
inline bool StopQueryReply::_internal_success() const {
  return success_;
}
inline bool StopQueryReply::success() const {
  // @@protoc_insertion_point(field_get:StopQueryReply.success)
  return _internal_success();
}
inline void StopQueryReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void StopQueryReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:StopQueryReply.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WorkerRPCService_2eproto
