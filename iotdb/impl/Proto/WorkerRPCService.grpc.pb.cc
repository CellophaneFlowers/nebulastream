// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: WorkerRPCService.proto

#include "WorkerRPCService.pb.h"
#include "WorkerRPCService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* WorkerRPCService_method_names[] = {
  "/WorkerRPCService/DeployQuery",
  "/WorkerRPCService/UndeployQuery",
  "/WorkerRPCService/RegisterQuery",
  "/WorkerRPCService/UnregisterQuery",
  "/WorkerRPCService/StartQuery",
  "/WorkerRPCService/StopQuery",
};

std::unique_ptr< WorkerRPCService::Stub> WorkerRPCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WorkerRPCService::Stub> stub(new WorkerRPCService::Stub(channel));
  return stub;
}

WorkerRPCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DeployQuery_(WorkerRPCService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UndeployQuery_(WorkerRPCService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterQuery_(WorkerRPCService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterQuery_(WorkerRPCService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartQuery_(WorkerRPCService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopQuery_(WorkerRPCService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WorkerRPCService::Stub::DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::DeployQueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeployQuery_, context, request, response);
}

void WorkerRPCService::Stub::experimental_async::DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_DeployQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::DeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeployQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_DeployQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_DeployQuery_, context, request, response, reactor);
}

void WorkerRPCService::Stub::experimental_async::DeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_DeployQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DeployQueryReply>* WorkerRPCService::Stub::AsyncDeployQueryRaw(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DeployQueryReply>::Create(channel_.get(), cq, rpcmethod_DeployQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DeployQueryReply>* WorkerRPCService::Stub::PrepareAsyncDeployQueryRaw(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DeployQueryReply>::Create(channel_.get(), cq, rpcmethod_DeployQuery_, context, request, false);
}

::grpc::Status WorkerRPCService::Stub::UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::UndeployQueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UndeployQuery_, context, request, response);
}

void WorkerRPCService::Stub::experimental_async::UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UndeployQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::UndeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UndeployQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UndeployQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UndeployQuery_, context, request, response, reactor);
}

void WorkerRPCService::Stub::experimental_async::UndeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UndeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UndeployQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UndeployQueryReply>* WorkerRPCService::Stub::AsyncUndeployQueryRaw(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UndeployQueryReply>::Create(channel_.get(), cq, rpcmethod_UndeployQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UndeployQueryReply>* WorkerRPCService::Stub::PrepareAsyncUndeployQueryRaw(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UndeployQueryReply>::Create(channel_.get(), cq, rpcmethod_UndeployQuery_, context, request, false);
}

::grpc::Status WorkerRPCService::Stub::RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::RegisterQueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterQuery_, context, request, response);
}

void WorkerRPCService::Stub::experimental_async::RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::RegisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterQuery_, context, request, response, reactor);
}

void WorkerRPCService::Stub::experimental_async::RegisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RegisterQueryReply>* WorkerRPCService::Stub::AsyncRegisterQueryRaw(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterQueryReply>::Create(channel_.get(), cq, rpcmethod_RegisterQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterQueryReply>* WorkerRPCService::Stub::PrepareAsyncRegisterQueryRaw(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterQueryReply>::Create(channel_.get(), cq, rpcmethod_RegisterQuery_, context, request, false);
}

::grpc::Status WorkerRPCService::Stub::UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::UnregisterQueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterQuery_, context, request, response);
}

void WorkerRPCService::Stub::experimental_async::UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::UnregisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterQuery_, context, request, response, reactor);
}

void WorkerRPCService::Stub::experimental_async::UnregisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnregisterQueryReply>* WorkerRPCService::Stub::AsyncUnregisterQueryRaw(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterQueryReply>::Create(channel_.get(), cq, rpcmethod_UnregisterQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UnregisterQueryReply>* WorkerRPCService::Stub::PrepareAsyncUnregisterQueryRaw(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterQueryReply>::Create(channel_.get(), cq, rpcmethod_UnregisterQuery_, context, request, false);
}

::grpc::Status WorkerRPCService::Stub::StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::StartQueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartQuery_, context, request, response);
}

void WorkerRPCService::Stub::experimental_async::StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_StartQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::StartQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_StartQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_StartQuery_, context, request, response, reactor);
}

void WorkerRPCService::Stub::experimental_async::StartQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_StartQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StartQueryReply>* WorkerRPCService::Stub::AsyncStartQueryRaw(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::StartQueryReply>::Create(channel_.get(), cq, rpcmethod_StartQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::StartQueryReply>* WorkerRPCService::Stub::PrepareAsyncStartQueryRaw(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::StartQueryReply>::Create(channel_.get(), cq, rpcmethod_StartQuery_, context, request, false);
}

::grpc::Status WorkerRPCService::Stub::StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::StopQueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopQuery_, context, request, response);
}

void WorkerRPCService::Stub::experimental_async::StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_StopQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::StopQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_StopQuery_, context, request, response, std::move(f));
}

void WorkerRPCService::Stub::experimental_async::StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_StopQuery_, context, request, response, reactor);
}

void WorkerRPCService::Stub::experimental_async::StopQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_StopQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StopQueryReply>* WorkerRPCService::Stub::AsyncStopQueryRaw(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::StopQueryReply>::Create(channel_.get(), cq, rpcmethod_StopQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::StopQueryReply>* WorkerRPCService::Stub::PrepareAsyncStopQueryRaw(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::StopQueryReply>::Create(channel_.get(), cq, rpcmethod_StopQuery_, context, request, false);
}

WorkerRPCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerRPCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerRPCService::Service, ::DeployQueryRequest, ::DeployQueryReply>(
          std::mem_fn(&WorkerRPCService::Service::DeployQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerRPCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerRPCService::Service, ::UndeployQueryRequest, ::UndeployQueryReply>(
          std::mem_fn(&WorkerRPCService::Service::UndeployQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerRPCService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerRPCService::Service, ::RegisterQueryRequest, ::RegisterQueryReply>(
          std::mem_fn(&WorkerRPCService::Service::RegisterQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerRPCService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerRPCService::Service, ::UnregisterQueryRequest, ::UnregisterQueryReply>(
          std::mem_fn(&WorkerRPCService::Service::UnregisterQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerRPCService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerRPCService::Service, ::StartQueryRequest, ::StartQueryReply>(
          std::mem_fn(&WorkerRPCService::Service::StartQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerRPCService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerRPCService::Service, ::StopQueryRequest, ::StopQueryReply>(
          std::mem_fn(&WorkerRPCService::Service::StopQuery), this)));
}

WorkerRPCService::Service::~Service() {
}

::grpc::Status WorkerRPCService::Service::DeployQuery(::grpc::ServerContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerRPCService::Service::UndeployQuery(::grpc::ServerContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerRPCService::Service::RegisterQuery(::grpc::ServerContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerRPCService::Service::UnregisterQuery(::grpc::ServerContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerRPCService::Service::StartQuery(::grpc::ServerContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerRPCService::Service::StopQuery(::grpc::ServerContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


