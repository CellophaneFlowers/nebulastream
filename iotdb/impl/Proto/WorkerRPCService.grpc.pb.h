// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: WorkerRPCService.proto
#ifndef GRPC_WorkerRPCService_2eproto__INCLUDED
#define GRPC_WorkerRPCService_2eproto__INCLUDED

#include "WorkerRPCService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class WorkerRPCService final {
 public:
  static constexpr char const* service_full_name() {
    return "WorkerRPCService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::DeployQueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeployQueryReply>> AsyncDeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeployQueryReply>>(AsyncDeployQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeployQueryReply>> PrepareAsyncDeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeployQueryReply>>(PrepareAsyncDeployQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::UndeployQueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UndeployQueryReply>> AsyncUndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UndeployQueryReply>>(AsyncUndeployQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UndeployQueryReply>> PrepareAsyncUndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UndeployQueryReply>>(PrepareAsyncUndeployQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::RegisterQueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterQueryReply>> AsyncRegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterQueryReply>>(AsyncRegisterQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterQueryReply>> PrepareAsyncRegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegisterQueryReply>>(PrepareAsyncRegisterQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::UnregisterQueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UnregisterQueryReply>> AsyncUnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UnregisterQueryReply>>(AsyncUnregisterQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UnregisterQueryReply>> PrepareAsyncUnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UnregisterQueryReply>>(PrepareAsyncUnregisterQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::StartQueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartQueryReply>> AsyncStartQuery(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartQueryReply>>(AsyncStartQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartQueryReply>> PrepareAsyncStartQuery(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartQueryReply>>(PrepareAsyncStartQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::StopQueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopQueryReply>> AsyncStopQuery(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopQueryReply>>(AsyncStopQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopQueryReply>> PrepareAsyncStopQuery(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StopQueryReply>>(PrepareAsyncStopQueryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeployQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeployQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UndeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UndeployQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UndeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UndeployQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UndeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UndeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnregisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UnregisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UnregisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopQueryReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopQueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeployQueryReply>* AsyncDeployQueryRaw(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeployQueryReply>* PrepareAsyncDeployQueryRaw(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UndeployQueryReply>* AsyncUndeployQueryRaw(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UndeployQueryReply>* PrepareAsyncUndeployQueryRaw(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegisterQueryReply>* AsyncRegisterQueryRaw(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegisterQueryReply>* PrepareAsyncRegisterQueryRaw(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UnregisterQueryReply>* AsyncUnregisterQueryRaw(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UnregisterQueryReply>* PrepareAsyncUnregisterQueryRaw(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StartQueryReply>* AsyncStartQueryRaw(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StartQueryReply>* PrepareAsyncStartQueryRaw(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StopQueryReply>* AsyncStopQueryRaw(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StopQueryReply>* PrepareAsyncStopQueryRaw(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::DeployQueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeployQueryReply>> AsyncDeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeployQueryReply>>(AsyncDeployQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeployQueryReply>> PrepareAsyncDeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeployQueryReply>>(PrepareAsyncDeployQueryRaw(context, request, cq));
    }
    ::grpc::Status UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::UndeployQueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UndeployQueryReply>> AsyncUndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UndeployQueryReply>>(AsyncUndeployQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UndeployQueryReply>> PrepareAsyncUndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UndeployQueryReply>>(PrepareAsyncUndeployQueryRaw(context, request, cq));
    }
    ::grpc::Status RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::RegisterQueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterQueryReply>> AsyncRegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterQueryReply>>(AsyncRegisterQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterQueryReply>> PrepareAsyncRegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegisterQueryReply>>(PrepareAsyncRegisterQueryRaw(context, request, cq));
    }
    ::grpc::Status UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::UnregisterQueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UnregisterQueryReply>> AsyncUnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UnregisterQueryReply>>(AsyncUnregisterQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UnregisterQueryReply>> PrepareAsyncUnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UnregisterQueryReply>>(PrepareAsyncUnregisterQueryRaw(context, request, cq));
    }
    ::grpc::Status StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::StartQueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartQueryReply>> AsyncStartQuery(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartQueryReply>>(AsyncStartQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartQueryReply>> PrepareAsyncStartQuery(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartQueryReply>>(PrepareAsyncStartQueryRaw(context, request, cq));
    }
    ::grpc::Status StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::StopQueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopQueryReply>> AsyncStopQuery(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopQueryReply>>(AsyncStopQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopQueryReply>> PrepareAsyncStopQuery(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StopQueryReply>>(PrepareAsyncStopQueryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response, std::function<void(::grpc::Status)>) override;
      void DeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeployQueryReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeployQuery(::grpc::ClientContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeployQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response, std::function<void(::grpc::Status)>) override;
      void UndeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UndeployQueryReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UndeployQuery(::grpc::ClientContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UndeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UndeployQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UndeployQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UndeployQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response, std::function<void(::grpc::Status)>) override;
      void RegisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterQueryReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterQuery(::grpc::ClientContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response, std::function<void(::grpc::Status)>) override;
      void UnregisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterQueryReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UnregisterQuery(::grpc::ClientContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UnregisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UnregisterQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response, std::function<void(::grpc::Status)>) override;
      void StartQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartQueryReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartQuery(::grpc::ClientContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response, std::function<void(::grpc::Status)>) override;
      void StopQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopQueryReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopQuery(::grpc::ClientContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopQueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StopQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): coordinatorStub(stub) { }
      Stub* stub() { return coordinatorStub; }
      Stub* coordinatorStub;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::DeployQueryReply>* AsyncDeployQueryRaw(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeployQueryReply>* PrepareAsyncDeployQueryRaw(::grpc::ClientContext* context, const ::DeployQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UndeployQueryReply>* AsyncUndeployQueryRaw(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UndeployQueryReply>* PrepareAsyncUndeployQueryRaw(::grpc::ClientContext* context, const ::UndeployQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegisterQueryReply>* AsyncRegisterQueryRaw(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegisterQueryReply>* PrepareAsyncRegisterQueryRaw(::grpc::ClientContext* context, const ::RegisterQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UnregisterQueryReply>* AsyncUnregisterQueryRaw(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UnregisterQueryReply>* PrepareAsyncUnregisterQueryRaw(::grpc::ClientContext* context, const ::UnregisterQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StartQueryReply>* AsyncStartQueryRaw(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StartQueryReply>* PrepareAsyncStartQueryRaw(::grpc::ClientContext* context, const ::StartQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StopQueryReply>* AsyncStopQueryRaw(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StopQueryReply>* PrepareAsyncStopQueryRaw(::grpc::ClientContext* context, const ::StopQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DeployQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_UndeployQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_UnregisterQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_StartQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_StopQuery_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DeployQuery(::grpc::ServerContext* context, const ::DeployQueryRequest* request, ::DeployQueryReply* response);
    virtual ::grpc::Status UndeployQuery(::grpc::ServerContext* context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response);
    virtual ::grpc::Status RegisterQuery(::grpc::ServerContext* context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response);
    virtual ::grpc::Status UnregisterQuery(::grpc::ServerContext* context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response);
    virtual ::grpc::Status StartQuery(::grpc::ServerContext* context, const ::StartQueryRequest* request, ::StartQueryReply* response);
    virtual ::grpc::Status StopQuery(::grpc::ServerContext* context, const ::StopQueryRequest* request, ::StopQueryReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeployQuery() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployQuery(::grpc::ServerContext* /*context*/, const ::DeployQueryRequest* /*request*/, ::DeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeployQuery(::grpc::ServerContext* context, ::DeployQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeployQueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UndeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UndeployQuery() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UndeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeployQuery(::grpc::ServerContext* /*context*/, const ::UndeployQueryRequest* /*request*/, ::UndeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeployQuery(::grpc::ServerContext* context, ::UndeployQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::UndeployQueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterQuery() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterQuery(::grpc::ServerContext* /*context*/, const ::RegisterQueryRequest* /*request*/, ::RegisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterQuery(::grpc::ServerContext* context, ::RegisterQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::RegisterQueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnregisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnregisterQuery() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UnregisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterQuery(::grpc::ServerContext* /*context*/, const ::UnregisterQueryRequest* /*request*/, ::UnregisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterQuery(::grpc::ServerContext* context, ::UnregisterQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::UnregisterQueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartQuery() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StartQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartQuery(::grpc::ServerContext* /*context*/, const ::StartQueryRequest* /*request*/, ::StartQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartQuery(::grpc::ServerContext* context, ::StartQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::StartQueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopQuery() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StopQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopQuery(::grpc::ServerContext* /*context*/, const ::StopQueryRequest* /*request*/, ::StopQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopQuery(::grpc::ServerContext* context, ::StopQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::StopQueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DeployQuery<WithAsyncMethod_UndeployQuery<WithAsyncMethod_RegisterQuery<WithAsyncMethod_UnregisterQuery<WithAsyncMethod_StartQuery<WithAsyncMethod_StopQuery<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeployQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::DeployQueryRequest, ::DeployQueryReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::DeployQueryRequest* request, ::DeployQueryReply* response) { return this->DeployQuery(context, request, response); }));}
    void SetMessageAllocatorFor_DeployQuery(
        ::grpc::experimental::MessageAllocator< ::DeployQueryRequest, ::DeployQueryReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DeployQueryRequest, ::DeployQueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployQuery(::grpc::ServerContext* /*context*/, const ::DeployQueryRequest* /*request*/, ::DeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeployQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::DeployQueryRequest* /*request*/, ::DeployQueryReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeployQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::DeployQueryRequest* /*request*/, ::DeployQueryReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UndeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UndeployQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::UndeployQueryRequest, ::UndeployQueryReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::UndeployQueryRequest* request, ::UndeployQueryReply* response) { return this->UndeployQuery(context, request, response); }));}
    void SetMessageAllocatorFor_UndeployQuery(
        ::grpc::experimental::MessageAllocator< ::UndeployQueryRequest, ::UndeployQueryReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::UndeployQueryRequest, ::UndeployQueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UndeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeployQuery(::grpc::ServerContext* /*context*/, const ::UndeployQueryRequest* /*request*/, ::UndeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UndeployQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::UndeployQueryRequest* /*request*/, ::UndeployQueryReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UndeployQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::UndeployQueryRequest* /*request*/, ::UndeployQueryReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::RegisterQueryRequest, ::RegisterQueryReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::RegisterQueryRequest* request, ::RegisterQueryReply* response) { return this->RegisterQuery(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterQuery(
        ::grpc::experimental::MessageAllocator< ::RegisterQueryRequest, ::RegisterQueryReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::RegisterQueryRequest, ::RegisterQueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterQuery(::grpc::ServerContext* /*context*/, const ::RegisterQueryRequest* /*request*/, ::RegisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::RegisterQueryRequest* /*request*/, ::RegisterQueryReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::RegisterQueryRequest* /*request*/, ::RegisterQueryReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UnregisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UnregisterQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::UnregisterQueryRequest, ::UnregisterQueryReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::UnregisterQueryRequest* request, ::UnregisterQueryReply* response) { return this->UnregisterQuery(context, request, response); }));}
    void SetMessageAllocatorFor_UnregisterQuery(
        ::grpc::experimental::MessageAllocator< ::UnregisterQueryRequest, ::UnregisterQueryReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::UnregisterQueryRequest, ::UnregisterQueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UnregisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterQuery(::grpc::ServerContext* /*context*/, const ::UnregisterQueryRequest* /*request*/, ::UnregisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnregisterQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::UnregisterQueryRequest* /*request*/, ::UnregisterQueryReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnregisterQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::UnregisterQueryRequest* /*request*/, ::UnregisterQueryReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::StartQueryRequest, ::StartQueryReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StartQueryRequest* request, ::StartQueryReply* response) { return this->StartQuery(context, request, response); }));}
    void SetMessageAllocatorFor_StartQuery(
        ::grpc::experimental::MessageAllocator< ::StartQueryRequest, ::StartQueryReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::StartQueryRequest, ::StartQueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartQuery(::grpc::ServerContext* /*context*/, const ::StartQueryRequest* /*request*/, ::StartQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::StartQueryRequest* /*request*/, ::StartQueryReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StartQueryRequest* /*request*/, ::StartQueryReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::StopQueryRequest, ::StopQueryReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StopQueryRequest* request, ::StopQueryReply* response) { return this->StopQuery(context, request, response); }));}
    void SetMessageAllocatorFor_StopQuery(
        ::grpc::experimental::MessageAllocator< ::StopQueryRequest, ::StopQueryReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::StopQueryRequest, ::StopQueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopQuery(::grpc::ServerContext* /*context*/, const ::StopQueryRequest* /*request*/, ::StopQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::StopQueryRequest* /*request*/, ::StopQueryReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StopQueryRequest* /*request*/, ::StopQueryReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_DeployQuery<ExperimentalWithCallbackMethod_UndeployQuery<ExperimentalWithCallbackMethod_RegisterQuery<ExperimentalWithCallbackMethod_UnregisterQuery<ExperimentalWithCallbackMethod_StartQuery<ExperimentalWithCallbackMethod_StopQuery<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_DeployQuery<ExperimentalWithCallbackMethod_UndeployQuery<ExperimentalWithCallbackMethod_RegisterQuery<ExperimentalWithCallbackMethod_UnregisterQuery<ExperimentalWithCallbackMethod_StartQuery<ExperimentalWithCallbackMethod_StopQuery<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeployQuery() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployQuery(::grpc::ServerContext* /*context*/, const ::DeployQueryRequest* /*request*/, ::DeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UndeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UndeployQuery() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UndeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeployQuery(::grpc::ServerContext* /*context*/, const ::UndeployQueryRequest* /*request*/, ::UndeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterQuery() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterQuery(::grpc::ServerContext* /*context*/, const ::RegisterQueryRequest* /*request*/, ::RegisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnregisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnregisterQuery() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UnregisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterQuery(::grpc::ServerContext* /*context*/, const ::UnregisterQueryRequest* /*request*/, ::UnregisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartQuery() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StartQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartQuery(::grpc::ServerContext* /*context*/, const ::StartQueryRequest* /*request*/, ::StartQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopQuery() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StopQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopQuery(::grpc::ServerContext* /*context*/, const ::StopQueryRequest* /*request*/, ::StopQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeployQuery() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployQuery(::grpc::ServerContext* /*context*/, const ::DeployQueryRequest* /*request*/, ::DeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeployQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UndeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UndeployQuery() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UndeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeployQuery(::grpc::ServerContext* /*context*/, const ::UndeployQueryRequest* /*request*/, ::UndeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeployQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterQuery() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RegisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterQuery(::grpc::ServerContext* /*context*/, const ::RegisterQueryRequest* /*request*/, ::RegisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnregisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnregisterQuery() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UnregisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterQuery(::grpc::ServerContext* /*context*/, const ::UnregisterQueryRequest* /*request*/, ::UnregisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartQuery() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StartQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartQuery(::grpc::ServerContext* /*context*/, const ::StartQueryRequest* /*request*/, ::StartQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopQuery() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StopQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopQuery(::grpc::ServerContext* /*context*/, const ::StopQueryRequest* /*request*/, ::StopQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeployQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeployQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployQuery(::grpc::ServerContext* /*context*/, const ::DeployQueryRequest* /*request*/, ::DeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeployQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeployQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UndeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UndeployQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UndeployQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UndeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeployQuery(::grpc::ServerContext* /*context*/, const ::UndeployQueryRequest* /*request*/, ::UndeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UndeployQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UndeployQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterQuery(::grpc::ServerContext* /*context*/, const ::RegisterQueryRequest* /*request*/, ::RegisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UnregisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UnregisterQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnregisterQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UnregisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterQuery(::grpc::ServerContext* /*context*/, const ::UnregisterQueryRequest* /*request*/, ::UnregisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnregisterQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnregisterQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartQuery(::grpc::ServerContext* /*context*/, const ::StartQueryRequest* /*request*/, ::StartQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopQuery() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopQuery(::grpc::ServerContext* /*context*/, const ::StopQueryRequest* /*request*/, ::StopQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopQuery(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeployQuery() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::DeployQueryRequest, ::DeployQueryReply>(std::bind(&WithStreamedUnaryMethod_DeployQuery<BaseClass>::StreamedDeployQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeployQuery(::grpc::ServerContext* /*context*/, const ::DeployQueryRequest* /*request*/, ::DeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeployQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeployQueryRequest,::DeployQueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UndeployQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UndeployQuery() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::UndeployQueryRequest, ::UndeployQueryReply>(std::bind(&WithStreamedUnaryMethod_UndeployQuery<BaseClass>::StreamedUndeployQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UndeployQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UndeployQuery(::grpc::ServerContext* /*context*/, const ::UndeployQueryRequest* /*request*/, ::UndeployQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUndeployQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UndeployQueryRequest,::UndeployQueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterQuery() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::RegisterQueryRequest, ::RegisterQueryReply>(std::bind(&WithStreamedUnaryMethod_RegisterQuery<BaseClass>::StreamedRegisterQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterQuery(::grpc::ServerContext* /*context*/, const ::RegisterQueryRequest* /*request*/, ::RegisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RegisterQueryRequest,::RegisterQueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnregisterQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnregisterQuery() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::UnregisterQueryRequest, ::UnregisterQueryReply>(std::bind(&WithStreamedUnaryMethod_UnregisterQuery<BaseClass>::StreamedUnregisterQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UnregisterQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnregisterQuery(::grpc::ServerContext* /*context*/, const ::UnregisterQueryRequest* /*request*/, ::UnregisterQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregisterQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UnregisterQueryRequest,::UnregisterQueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartQuery() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::StartQueryRequest, ::StartQueryReply>(std::bind(&WithStreamedUnaryMethod_StartQuery<BaseClass>::StreamedStartQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartQuery(::grpc::ServerContext* /*context*/, const ::StartQueryRequest* /*request*/, ::StartQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StartQueryRequest,::StartQueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopQuery() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::StopQueryRequest, ::StopQueryReply>(std::bind(&WithStreamedUnaryMethod_StopQuery<BaseClass>::StreamedStopQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopQuery(::grpc::ServerContext* /*context*/, const ::StopQueryRequest* /*request*/, ::StopQueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StopQueryRequest,::StopQueryReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DeployQuery<WithStreamedUnaryMethod_UndeployQuery<WithStreamedUnaryMethod_RegisterQuery<WithStreamedUnaryMethod_UnregisterQuery<WithStreamedUnaryMethod_StartQuery<WithStreamedUnaryMethod_StopQuery<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DeployQuery<WithStreamedUnaryMethod_UndeployQuery<WithStreamedUnaryMethod_RegisterQuery<WithStreamedUnaryMethod_UnregisterQuery<WithStreamedUnaryMethod_StartQuery<WithStreamedUnaryMethod_StopQuery<Service > > > > > > StreamedService;
};


#endif  // GRPC_WorkerRPCService_2eproto__INCLUDED
