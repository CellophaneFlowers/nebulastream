// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CoordinatorRPCService.proto

#include "CoordinatorRPCService.pb.h"
#include "CoordinatorRPCService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* CoordinatorRPCService_method_names[] = {
  "/CoordinatorRPCService/RegisterNode",
  "/CoordinatorRPCService/UnregisterNode",
  "/CoordinatorRPCService/RegisterPhysicalStream",
  "/CoordinatorRPCService/UnregisterPhysicalStream",
  "/CoordinatorRPCService/RegisterLogicalStream",
  "/CoordinatorRPCService/UnregisterLogicalStream",
  "/CoordinatorRPCService/AddParent",
  "/CoordinatorRPCService/RemoveParent",
};

std::unique_ptr< CoordinatorRPCService::Stub> CoordinatorRPCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CoordinatorRPCService::Stub> stub(new CoordinatorRPCService::Stub(channel));
  return stub;
}

CoordinatorRPCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterNode_(CoordinatorRPCService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterNode_(CoordinatorRPCService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterPhysicalStream_(CoordinatorRPCService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterPhysicalStream_(CoordinatorRPCService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterLogicalStream_(CoordinatorRPCService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterLogicalStream_(CoordinatorRPCService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddParent_(CoordinatorRPCService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveParent_(CoordinatorRPCService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CoordinatorRPCService::Stub::RegisterNode(::grpc::ClientContext* context, const ::RegisterNodeRequest& request, ::RegisterNodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterNode_, context, request, response);
}

void CoordinatorRPCService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::RegisterNodeRequest* request, ::RegisterNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterNode_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterNode_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::RegisterNodeRequest* request, ::RegisterNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterNode_, context, request, response, reactor);
}

void CoordinatorRPCService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RegisterNodeReply>* CoordinatorRPCService::Stub::AsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::RegisterNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterNodeReply>::Create(channel_.get(), cq, rpcmethod_RegisterNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterNodeReply>* CoordinatorRPCService::Stub::PrepareAsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::RegisterNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterNodeReply>::Create(channel_.get(), cq, rpcmethod_RegisterNode_, context, request, false);
}

::grpc::Status CoordinatorRPCService::Stub::UnregisterNode(::grpc::ClientContext* context, const ::UnregisterNodeRequest& request, ::UnregisterNodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterNode_, context, request, response);
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterNode(::grpc::ClientContext* context, const ::UnregisterNodeRequest* request, ::UnregisterNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterNode_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterNode_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterNode(::grpc::ClientContext* context, const ::UnregisterNodeRequest* request, ::UnregisterNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterNode_, context, request, response, reactor);
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnregisterNodeReply>* CoordinatorRPCService::Stub::AsyncUnregisterNodeRaw(::grpc::ClientContext* context, const ::UnregisterNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterNodeReply>::Create(channel_.get(), cq, rpcmethod_UnregisterNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UnregisterNodeReply>* CoordinatorRPCService::Stub::PrepareAsyncUnregisterNodeRaw(::grpc::ClientContext* context, const ::UnregisterNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterNodeReply>::Create(channel_.get(), cq, rpcmethod_UnregisterNode_, context, request, false);
}

::grpc::Status CoordinatorRPCService::Stub::RegisterPhysicalStream(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest& request, ::RegisterPhysicalStreamReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterPhysicalStream_, context, request, response);
}

void CoordinatorRPCService::Stub::experimental_async::RegisterPhysicalStream(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest* request, ::RegisterPhysicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterPhysicalStream_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::RegisterPhysicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterPhysicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterPhysicalStream_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::RegisterPhysicalStream(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest* request, ::RegisterPhysicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterPhysicalStream_, context, request, response, reactor);
}

void CoordinatorRPCService::Stub::experimental_async::RegisterPhysicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterPhysicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterPhysicalStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RegisterPhysicalStreamReply>* CoordinatorRPCService::Stub::AsyncRegisterPhysicalStreamRaw(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterPhysicalStreamReply>::Create(channel_.get(), cq, rpcmethod_RegisterPhysicalStream_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterPhysicalStreamReply>* CoordinatorRPCService::Stub::PrepareAsyncRegisterPhysicalStreamRaw(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterPhysicalStreamReply>::Create(channel_.get(), cq, rpcmethod_RegisterPhysicalStream_, context, request, false);
}

::grpc::Status CoordinatorRPCService::Stub::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest& request, ::UnregisterPhysicalStreamReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterPhysicalStream_, context, request, response);
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest* request, ::UnregisterPhysicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterPhysicalStream_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterPhysicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterPhysicalStream_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest* request, ::UnregisterPhysicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterPhysicalStream_, context, request, response, reactor);
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterPhysicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterPhysicalStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnregisterPhysicalStreamReply>* CoordinatorRPCService::Stub::AsyncUnregisterPhysicalStreamRaw(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterPhysicalStreamReply>::Create(channel_.get(), cq, rpcmethod_UnregisterPhysicalStream_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UnregisterPhysicalStreamReply>* CoordinatorRPCService::Stub::PrepareAsyncUnregisterPhysicalStreamRaw(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterPhysicalStreamReply>::Create(channel_.get(), cq, rpcmethod_UnregisterPhysicalStream_, context, request, false);
}

::grpc::Status CoordinatorRPCService::Stub::RegisterLogicalStream(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest& request, ::RegisterLogicalStreamReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterLogicalStream_, context, request, response);
}

void CoordinatorRPCService::Stub::experimental_async::RegisterLogicalStream(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest* request, ::RegisterLogicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterLogicalStream_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::RegisterLogicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterLogicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterLogicalStream_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::RegisterLogicalStream(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest* request, ::RegisterLogicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterLogicalStream_, context, request, response, reactor);
}

void CoordinatorRPCService::Stub::experimental_async::RegisterLogicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterLogicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RegisterLogicalStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RegisterLogicalStreamReply>* CoordinatorRPCService::Stub::AsyncRegisterLogicalStreamRaw(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterLogicalStreamReply>::Create(channel_.get(), cq, rpcmethod_RegisterLogicalStream_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterLogicalStreamReply>* CoordinatorRPCService::Stub::PrepareAsyncRegisterLogicalStreamRaw(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterLogicalStreamReply>::Create(channel_.get(), cq, rpcmethod_RegisterLogicalStream_, context, request, false);
}

::grpc::Status CoordinatorRPCService::Stub::UnregisterLogicalStream(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest& request, ::UnregisterLogicalStreamReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterLogicalStream_, context, request, response);
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterLogicalStream(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest* request, ::UnregisterLogicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterLogicalStream_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterLogicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterLogicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterLogicalStream_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterLogicalStream(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest* request, ::UnregisterLogicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterLogicalStream_, context, request, response, reactor);
}

void CoordinatorRPCService::Stub::experimental_async::UnregisterLogicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterLogicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_UnregisterLogicalStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnregisterLogicalStreamReply>* CoordinatorRPCService::Stub::AsyncUnregisterLogicalStreamRaw(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterLogicalStreamReply>::Create(channel_.get(), cq, rpcmethod_UnregisterLogicalStream_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UnregisterLogicalStreamReply>* CoordinatorRPCService::Stub::PrepareAsyncUnregisterLogicalStreamRaw(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterLogicalStreamReply>::Create(channel_.get(), cq, rpcmethod_UnregisterLogicalStream_, context, request, false);
}

::grpc::Status CoordinatorRPCService::Stub::AddParent(::grpc::ClientContext* context, const ::AddParentRequest& request, ::AddParentReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddParent_, context, request, response);
}

void CoordinatorRPCService::Stub::experimental_async::AddParent(::grpc::ClientContext* context, const ::AddParentRequest* request, ::AddParentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_AddParent_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::AddParent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AddParentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_AddParent_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::AddParent(::grpc::ClientContext* context, const ::AddParentRequest* request, ::AddParentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_AddParent_, context, request, response, reactor);
}

void CoordinatorRPCService::Stub::experimental_async::AddParent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AddParentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_AddParent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AddParentReply>* CoordinatorRPCService::Stub::AsyncAddParentRaw(::grpc::ClientContext* context, const ::AddParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AddParentReply>::Create(channel_.get(), cq, rpcmethod_AddParent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AddParentReply>* CoordinatorRPCService::Stub::PrepareAsyncAddParentRaw(::grpc::ClientContext* context, const ::AddParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AddParentReply>::Create(channel_.get(), cq, rpcmethod_AddParent_, context, request, false);
}

::grpc::Status CoordinatorRPCService::Stub::RemoveParent(::grpc::ClientContext* context, const ::RemoveParentRequest& request, ::RemoveParentReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveParent_, context, request, response);
}

void CoordinatorRPCService::Stub::experimental_async::RemoveParent(::grpc::ClientContext* context, const ::RemoveParentRequest* request, ::RemoveParentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RemoveParent_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::RemoveParent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RemoveParentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RemoveParent_, context, request, response, std::move(f));
}

void CoordinatorRPCService::Stub::experimental_async::RemoveParent(::grpc::ClientContext* context, const ::RemoveParentRequest* request, ::RemoveParentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RemoveParent_, context, request, response, reactor);
}

void CoordinatorRPCService::Stub::experimental_async::RemoveParent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RemoveParentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(coordinatorStub->channel_.get(), coordinatorStub->rpcmethod_RemoveParent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoveParentReply>* CoordinatorRPCService::Stub::AsyncRemoveParentRaw(::grpc::ClientContext* context, const ::RemoveParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RemoveParentReply>::Create(channel_.get(), cq, rpcmethod_RemoveParent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RemoveParentReply>* CoordinatorRPCService::Stub::PrepareAsyncRemoveParentRaw(::grpc::ClientContext* context, const ::RemoveParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RemoveParentReply>::Create(channel_.get(), cq, rpcmethod_RemoveParent_, context, request, false);
}

CoordinatorRPCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorRPCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorRPCService::Service, ::RegisterNodeRequest, ::RegisterNodeReply>(
          std::mem_fn(&CoordinatorRPCService::Service::RegisterNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorRPCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorRPCService::Service, ::UnregisterNodeRequest, ::UnregisterNodeReply>(
          std::mem_fn(&CoordinatorRPCService::Service::UnregisterNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorRPCService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorRPCService::Service, ::RegisterPhysicalStreamRequest, ::RegisterPhysicalStreamReply>(
          std::mem_fn(&CoordinatorRPCService::Service::RegisterPhysicalStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorRPCService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorRPCService::Service, ::UnregisterPhysicalStreamRequest, ::UnregisterPhysicalStreamReply>(
          std::mem_fn(&CoordinatorRPCService::Service::UnregisterPhysicalStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorRPCService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorRPCService::Service, ::RegisterLogicalStreamRequest, ::RegisterLogicalStreamReply>(
          std::mem_fn(&CoordinatorRPCService::Service::RegisterLogicalStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorRPCService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorRPCService::Service, ::UnregisterLogicalStreamRequest, ::UnregisterLogicalStreamReply>(
          std::mem_fn(&CoordinatorRPCService::Service::UnregisterLogicalStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorRPCService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorRPCService::Service, ::AddParentRequest, ::AddParentReply>(
          std::mem_fn(&CoordinatorRPCService::Service::AddParent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorRPCService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorRPCService::Service, ::RemoveParentRequest, ::RemoveParentReply>(
          std::mem_fn(&CoordinatorRPCService::Service::RemoveParent), this)));
}

CoordinatorRPCService::Service::~Service() {
}

::grpc::Status CoordinatorRPCService::Service::RegisterNode(::grpc::ServerContext* context, const ::RegisterNodeRequest* request, ::RegisterNodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorRPCService::Service::UnregisterNode(::grpc::ServerContext* context, const ::UnregisterNodeRequest* request, ::UnregisterNodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorRPCService::Service::RegisterPhysicalStream(::grpc::ServerContext* context, const ::RegisterPhysicalStreamRequest* request, ::RegisterPhysicalStreamReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorRPCService::Service::UnregisterPhysicalStream(::grpc::ServerContext* context, const ::UnregisterPhysicalStreamRequest* request, ::UnregisterPhysicalStreamReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorRPCService::Service::RegisterLogicalStream(::grpc::ServerContext* context, const ::RegisterLogicalStreamRequest* request, ::RegisterLogicalStreamReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorRPCService::Service::UnregisterLogicalStream(::grpc::ServerContext* context, const ::UnregisterLogicalStreamRequest* request, ::UnregisterLogicalStreamReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorRPCService::Service::AddParent(::grpc::ServerContext* context, const ::AddParentRequest* request, ::AddParentReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorRPCService::Service::RemoveParent(::grpc::ServerContext* context, const ::RemoveParentRequest* request, ::RemoveParentReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


