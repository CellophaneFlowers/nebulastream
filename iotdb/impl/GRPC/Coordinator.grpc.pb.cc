// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Coordinator.proto

#include "GRPC/Coordinator.pb.h"
#include "GRPC/Coordinator.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* CoordinatorService_method_names[] = {
  "/CoordinatorService/RegisterNode",
  "/CoordinatorService/UnregisterNode",
  "/CoordinatorService/RegisterPhysicalStream",
  "/CoordinatorService/UnregisterPhysicalStream",
  "/CoordinatorService/RegisterLogicalStream",
  "/CoordinatorService/UnregisterLogicalStream",
  "/CoordinatorService/AddParent",
  "/CoordinatorService/RemoveParent",
};

std::unique_ptr< CoordinatorService::Stub> CoordinatorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CoordinatorService::Stub> stub(new CoordinatorService::Stub(channel));
  return stub;
}

CoordinatorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterNode_(CoordinatorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterNode_(CoordinatorService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterPhysicalStream_(CoordinatorService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterPhysicalStream_(CoordinatorService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterLogicalStream_(CoordinatorService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterLogicalStream_(CoordinatorService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddParent_(CoordinatorService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveParent_(CoordinatorService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CoordinatorService::Stub::RegisterNode(::grpc::ClientContext* context, const ::RegisterNodeRequest& request, ::RegisterNodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterNode_, context, request, response);
}

void CoordinatorService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::RegisterNodeRequest* request, ::RegisterNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::RegisterNodeRequest* request, ::RegisterNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, reactor);
}

void CoordinatorService::Stub::experimental_async::RegisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RegisterNodeReply>* CoordinatorService::Stub::AsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::RegisterNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterNodeReply>::Create(channel_.get(), cq, rpcmethod_RegisterNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterNodeReply>* CoordinatorService::Stub::PrepareAsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::RegisterNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterNodeReply>::Create(channel_.get(), cq, rpcmethod_RegisterNode_, context, request, false);
}

::grpc::Status CoordinatorService::Stub::UnregisterNode(::grpc::ClientContext* context, const ::UnregisterNodeRequest& request, ::UnregisterNodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterNode_, context, request, response);
}

void CoordinatorService::Stub::experimental_async::UnregisterNode(::grpc::ClientContext* context, const ::UnregisterNodeRequest* request, ::UnregisterNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterNode_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::UnregisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterNode_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::UnregisterNode(::grpc::ClientContext* context, const ::UnregisterNodeRequest* request, ::UnregisterNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterNode_, context, request, response, reactor);
}

void CoordinatorService::Stub::experimental_async::UnregisterNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterNodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnregisterNodeReply>* CoordinatorService::Stub::AsyncUnregisterNodeRaw(::grpc::ClientContext* context, const ::UnregisterNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterNodeReply>::Create(channel_.get(), cq, rpcmethod_UnregisterNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UnregisterNodeReply>* CoordinatorService::Stub::PrepareAsyncUnregisterNodeRaw(::grpc::ClientContext* context, const ::UnregisterNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterNodeReply>::Create(channel_.get(), cq, rpcmethod_UnregisterNode_, context, request, false);
}

::grpc::Status CoordinatorService::Stub::RegisterPhysicalStream(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest& request, ::RegisterPhysicalStreamReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterPhysicalStream_, context, request, response);
}

void CoordinatorService::Stub::experimental_async::RegisterPhysicalStream(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest* request, ::RegisterPhysicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterPhysicalStream_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::RegisterPhysicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterPhysicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterPhysicalStream_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::RegisterPhysicalStream(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest* request, ::RegisterPhysicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterPhysicalStream_, context, request, response, reactor);
}

void CoordinatorService::Stub::experimental_async::RegisterPhysicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterPhysicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterPhysicalStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RegisterPhysicalStreamReply>* CoordinatorService::Stub::AsyncRegisterPhysicalStreamRaw(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterPhysicalStreamReply>::Create(channel_.get(), cq, rpcmethod_RegisterPhysicalStream_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterPhysicalStreamReply>* CoordinatorService::Stub::PrepareAsyncRegisterPhysicalStreamRaw(::grpc::ClientContext* context, const ::RegisterPhysicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterPhysicalStreamReply>::Create(channel_.get(), cq, rpcmethod_RegisterPhysicalStream_, context, request, false);
}

::grpc::Status CoordinatorService::Stub::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest& request, ::UnregisterPhysicalStreamReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterPhysicalStream_, context, request, response);
}

void CoordinatorService::Stub::experimental_async::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest* request, ::UnregisterPhysicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterPhysicalStream_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterPhysicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterPhysicalStream_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest* request, ::UnregisterPhysicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterPhysicalStream_, context, request, response, reactor);
}

void CoordinatorService::Stub::experimental_async::UnregisterPhysicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterPhysicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterPhysicalStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnregisterPhysicalStreamReply>* CoordinatorService::Stub::AsyncUnregisterPhysicalStreamRaw(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterPhysicalStreamReply>::Create(channel_.get(), cq, rpcmethod_UnregisterPhysicalStream_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UnregisterPhysicalStreamReply>* CoordinatorService::Stub::PrepareAsyncUnregisterPhysicalStreamRaw(::grpc::ClientContext* context, const ::UnregisterPhysicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterPhysicalStreamReply>::Create(channel_.get(), cq, rpcmethod_UnregisterPhysicalStream_, context, request, false);
}

::grpc::Status CoordinatorService::Stub::RegisterLogicalStream(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest& request, ::RegisterLogicalStreamReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterLogicalStream_, context, request, response);
}

void CoordinatorService::Stub::experimental_async::RegisterLogicalStream(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest* request, ::RegisterLogicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterLogicalStream_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::RegisterLogicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterLogicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterLogicalStream_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::RegisterLogicalStream(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest* request, ::RegisterLogicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterLogicalStream_, context, request, response, reactor);
}

void CoordinatorService::Stub::experimental_async::RegisterLogicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RegisterLogicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterLogicalStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RegisterLogicalStreamReply>* CoordinatorService::Stub::AsyncRegisterLogicalStreamRaw(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterLogicalStreamReply>::Create(channel_.get(), cq, rpcmethod_RegisterLogicalStream_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RegisterLogicalStreamReply>* CoordinatorService::Stub::PrepareAsyncRegisterLogicalStreamRaw(::grpc::ClientContext* context, const ::RegisterLogicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RegisterLogicalStreamReply>::Create(channel_.get(), cq, rpcmethod_RegisterLogicalStream_, context, request, false);
}

::grpc::Status CoordinatorService::Stub::UnregisterLogicalStream(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest& request, ::UnregisterLogicalStreamReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterLogicalStream_, context, request, response);
}

void CoordinatorService::Stub::experimental_async::UnregisterLogicalStream(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest* request, ::UnregisterLogicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterLogicalStream_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::UnregisterLogicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterLogicalStreamReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterLogicalStream_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::UnregisterLogicalStream(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest* request, ::UnregisterLogicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterLogicalStream_, context, request, response, reactor);
}

void CoordinatorService::Stub::experimental_async::UnregisterLogicalStream(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::UnregisterLogicalStreamReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterLogicalStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UnregisterLogicalStreamReply>* CoordinatorService::Stub::AsyncUnregisterLogicalStreamRaw(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterLogicalStreamReply>::Create(channel_.get(), cq, rpcmethod_UnregisterLogicalStream_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::UnregisterLogicalStreamReply>* CoordinatorService::Stub::PrepareAsyncUnregisterLogicalStreamRaw(::grpc::ClientContext* context, const ::UnregisterLogicalStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::UnregisterLogicalStreamReply>::Create(channel_.get(), cq, rpcmethod_UnregisterLogicalStream_, context, request, false);
}

::grpc::Status CoordinatorService::Stub::AddParent(::grpc::ClientContext* context, const ::AddParentRequest& request, ::AddParentReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddParent_, context, request, response);
}

void CoordinatorService::Stub::experimental_async::AddParent(::grpc::ClientContext* context, const ::AddParentRequest* request, ::AddParentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddParent_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::AddParent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AddParentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddParent_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::AddParent(::grpc::ClientContext* context, const ::AddParentRequest* request, ::AddParentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddParent_, context, request, response, reactor);
}

void CoordinatorService::Stub::experimental_async::AddParent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AddParentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddParent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AddParentReply>* CoordinatorService::Stub::AsyncAddParentRaw(::grpc::ClientContext* context, const ::AddParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AddParentReply>::Create(channel_.get(), cq, rpcmethod_AddParent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AddParentReply>* CoordinatorService::Stub::PrepareAsyncAddParentRaw(::grpc::ClientContext* context, const ::AddParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AddParentReply>::Create(channel_.get(), cq, rpcmethod_AddParent_, context, request, false);
}

::grpc::Status CoordinatorService::Stub::RemoveParent(::grpc::ClientContext* context, const ::RemoveParentRequest& request, ::RemoveParentReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveParent_, context, request, response);
}

void CoordinatorService::Stub::experimental_async::RemoveParent(::grpc::ClientContext* context, const ::RemoveParentRequest* request, ::RemoveParentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveParent_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::RemoveParent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RemoveParentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveParent_, context, request, response, std::move(f));
}

void CoordinatorService::Stub::experimental_async::RemoveParent(::grpc::ClientContext* context, const ::RemoveParentRequest* request, ::RemoveParentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveParent_, context, request, response, reactor);
}

void CoordinatorService::Stub::experimental_async::RemoveParent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::RemoveParentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveParent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoveParentReply>* CoordinatorService::Stub::AsyncRemoveParentRaw(::grpc::ClientContext* context, const ::RemoveParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RemoveParentReply>::Create(channel_.get(), cq, rpcmethod_RemoveParent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::RemoveParentReply>* CoordinatorService::Stub::PrepareAsyncRemoveParentRaw(::grpc::ClientContext* context, const ::RemoveParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::RemoveParentReply>::Create(channel_.get(), cq, rpcmethod_RemoveParent_, context, request, false);
}

CoordinatorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorService::Service, ::RegisterNodeRequest, ::RegisterNodeReply>(
          std::mem_fn(&CoordinatorService::Service::RegisterNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorService::Service, ::UnregisterNodeRequest, ::UnregisterNodeReply>(
          std::mem_fn(&CoordinatorService::Service::UnregisterNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorService::Service, ::RegisterPhysicalStreamRequest, ::RegisterPhysicalStreamReply>(
          std::mem_fn(&CoordinatorService::Service::RegisterPhysicalStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorService::Service, ::UnregisterPhysicalStreamRequest, ::UnregisterPhysicalStreamReply>(
          std::mem_fn(&CoordinatorService::Service::UnregisterPhysicalStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorService::Service, ::RegisterLogicalStreamRequest, ::RegisterLogicalStreamReply>(
          std::mem_fn(&CoordinatorService::Service::RegisterLogicalStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorService::Service, ::UnregisterLogicalStreamRequest, ::UnregisterLogicalStreamReply>(
          std::mem_fn(&CoordinatorService::Service::UnregisterLogicalStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorService::Service, ::AddParentRequest, ::AddParentReply>(
          std::mem_fn(&CoordinatorService::Service::AddParent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoordinatorService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoordinatorService::Service, ::RemoveParentRequest, ::RemoveParentReply>(
          std::mem_fn(&CoordinatorService::Service::RemoveParent), this)));
}

CoordinatorService::Service::~Service() {
}

::grpc::Status CoordinatorService::Service::RegisterNode(::grpc::ServerContext* context, const ::RegisterNodeRequest* request, ::RegisterNodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::UnregisterNode(::grpc::ServerContext* context, const ::UnregisterNodeRequest* request, ::UnregisterNodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::RegisterPhysicalStream(::grpc::ServerContext* context, const ::RegisterPhysicalStreamRequest* request, ::RegisterPhysicalStreamReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::UnregisterPhysicalStream(::grpc::ServerContext* context, const ::UnregisterPhysicalStreamRequest* request, ::UnregisterPhysicalStreamReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::RegisterLogicalStream(::grpc::ServerContext* context, const ::RegisterLogicalStreamRequest* request, ::RegisterLogicalStreamReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::UnregisterLogicalStream(::grpc::ServerContext* context, const ::UnregisterLogicalStreamRequest* request, ::UnregisterLogicalStreamReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::AddParent(::grpc::ServerContext* context, const ::AddParentRequest* request, ::AddParentReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoordinatorService::Service::RemoveParent(::grpc::ServerContext* context, const ::RemoveParentRequest* request, ::RemoveParentReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


