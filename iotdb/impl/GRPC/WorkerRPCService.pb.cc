// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkerRPCService.proto

#include <GRPC/WorkerRPCService.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class DeployQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeployQueryRequest> _instance;
} _DeployQueryRequest_default_instance_;
class DeployQueryReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeployQueryReply> _instance;
} _DeployQueryReply_default_instance_;
class UndeployQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UndeployQueryRequest> _instance;
} _UndeployQueryRequest_default_instance_;
class UndeployQueryReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UndeployQueryReply> _instance;
} _UndeployQueryReply_default_instance_;
class RegisterQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterQueryRequest> _instance;
} _RegisterQueryRequest_default_instance_;
class RegisterQueryReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterQueryReply> _instance;
} _RegisterQueryReply_default_instance_;
class UnregisterQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterQueryRequest> _instance;
} _UnregisterQueryRequest_default_instance_;
class UnregisterQueryReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterQueryReply> _instance;
} _UnregisterQueryReply_default_instance_;
class StartQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartQueryRequest> _instance;
} _StartQueryRequest_default_instance_;
class StartQueryReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartQueryReply> _instance;
} _StartQueryReply_default_instance_;
class StopQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopQueryRequest> _instance;
} _StopQueryRequest_default_instance_;
class StopQueryReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopQueryReply> _instance;
} _StopQueryReply_default_instance_;
static void InitDefaultsscc_info_DeployQueryReply_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeployQueryReply_default_instance_;
    new (ptr) ::DeployQueryReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeployQueryReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeployQueryReply_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeployQueryReply_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_DeployQueryRequest_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeployQueryRequest_default_instance_;
    new (ptr) ::DeployQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeployQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeployQueryRequest_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeployQueryRequest_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_RegisterQueryReply_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterQueryReply_default_instance_;
    new (ptr) ::RegisterQueryReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterQueryReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterQueryReply_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterQueryReply_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_RegisterQueryRequest_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterQueryRequest_default_instance_;
    new (ptr) ::RegisterQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterQueryRequest_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterQueryRequest_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_StartQueryReply_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartQueryReply_default_instance_;
    new (ptr) ::StartQueryReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartQueryReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartQueryReply_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartQueryReply_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_StartQueryRequest_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartQueryRequest_default_instance_;
    new (ptr) ::StartQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartQueryRequest_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartQueryRequest_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_StopQueryReply_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StopQueryReply_default_instance_;
    new (ptr) ::StopQueryReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StopQueryReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopQueryReply_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopQueryReply_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_StopQueryRequest_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StopQueryRequest_default_instance_;
    new (ptr) ::StopQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StopQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopQueryRequest_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopQueryRequest_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_UndeployQueryReply_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UndeployQueryReply_default_instance_;
    new (ptr) ::UndeployQueryReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UndeployQueryReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UndeployQueryReply_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UndeployQueryReply_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_UndeployQueryRequest_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UndeployQueryRequest_default_instance_;
    new (ptr) ::UndeployQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UndeployQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UndeployQueryRequest_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UndeployQueryRequest_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_UnregisterQueryReply_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnregisterQueryReply_default_instance_;
    new (ptr) ::UnregisterQueryReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnregisterQueryReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnregisterQueryReply_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnregisterQueryReply_WorkerRPCService_2eproto}, {}};

static void InitDefaultsscc_info_UnregisterQueryRequest_WorkerRPCService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnregisterQueryRequest_default_instance_;
    new (ptr) ::UnregisterQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnregisterQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnregisterQueryRequest_WorkerRPCService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnregisterQueryRequest_WorkerRPCService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_WorkerRPCService_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_WorkerRPCService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_WorkerRPCService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_WorkerRPCService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeployQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeployQueryRequest, eto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeployQueryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeployQueryReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UndeployQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UndeployQueryRequest, queryid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UndeployQueryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UndeployQueryReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterQueryRequest, eto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterQueryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterQueryReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnregisterQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnregisterQueryRequest, queryid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnregisterQueryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnregisterQueryReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StartQueryRequest, queryid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartQueryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StartQueryReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StopQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StopQueryRequest, queryid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StopQueryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StopQueryReply, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DeployQueryRequest)},
  { 6, -1, sizeof(::DeployQueryReply)},
  { 12, -1, sizeof(::UndeployQueryRequest)},
  { 18, -1, sizeof(::UndeployQueryReply)},
  { 24, -1, sizeof(::RegisterQueryRequest)},
  { 30, -1, sizeof(::RegisterQueryReply)},
  { 36, -1, sizeof(::UnregisterQueryRequest)},
  { 42, -1, sizeof(::UnregisterQueryReply)},
  { 48, -1, sizeof(::StartQueryRequest)},
  { 54, -1, sizeof(::StartQueryReply)},
  { 60, -1, sizeof(::StopQueryRequest)},
  { 66, -1, sizeof(::StopQueryReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeployQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeployQueryReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UndeployQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UndeployQueryReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterQueryReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnregisterQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnregisterQueryReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StartQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StartQueryReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StopQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StopQueryReply_default_instance_),
};

const char descriptor_table_protodef_WorkerRPCService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026WorkerRPCService.proto\"!\n\022DeployQueryR"
  "equest\022\013\n\003eto\030\001 \001(\t\"#\n\020DeployQueryReply\022"
  "\017\n\007success\030\001 \001(\010\"\'\n\024UndeployQueryRequest"
  "\022\017\n\007queryId\030\001 \001(\t\"%\n\022UndeployQueryReply\022"
  "\017\n\007success\030\001 \001(\010\"#\n\024RegisterQueryRequest"
  "\022\013\n\003eto\030\001 \001(\t\"%\n\022RegisterQueryReply\022\017\n\007s"
  "uccess\030\001 \001(\010\")\n\026UnregisterQueryRequest\022\017"
  "\n\007queryId\030\001 \001(\t\"\'\n\024UnregisterQueryReply\022"
  "\017\n\007success\030\001 \001(\010\"$\n\021StartQueryRequest\022\017\n"
  "\007queryId\030\001 \001(\t\"\"\n\017StartQueryReply\022\017\n\007suc"
  "cess\030\001 \001(\010\"#\n\020StopQueryRequest\022\017\n\007queryI"
  "d\030\001 \001(\t\"!\n\016StopQueryReply\022\017\n\007success\030\001 \001"
  "(\0102\367\002\n\020WorkerRPCService\0227\n\013DeployQuery\022\023"
  ".DeployQueryRequest\032\021.DeployQueryReply\"\000"
  "\022=\n\rUndeployQuery\022\025.UndeployQueryRequest"
  "\032\023.UndeployQueryReply\"\000\022=\n\rRegisterQuery"
  "\022\025.RegisterQueryRequest\032\023.RegisterQueryR"
  "eply\"\000\022C\n\017UnregisterQuery\022\027.UnregisterQu"
  "eryRequest\032\025.UnregisterQueryReply\"\000\0224\n\nS"
  "tartQuery\022\022.StartQueryRequest\032\020.StartQue"
  "ryReply\"\000\0221\n\tStopQuery\022\021.StopQueryReques"
  "t\032\017.StopQueryReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_WorkerRPCService_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_WorkerRPCService_2eproto_sccs[12] = {
  &scc_info_DeployQueryReply_WorkerRPCService_2eproto.base,
  &scc_info_DeployQueryRequest_WorkerRPCService_2eproto.base,
  &scc_info_RegisterQueryReply_WorkerRPCService_2eproto.base,
  &scc_info_RegisterQueryRequest_WorkerRPCService_2eproto.base,
  &scc_info_StartQueryReply_WorkerRPCService_2eproto.base,
  &scc_info_StartQueryRequest_WorkerRPCService_2eproto.base,
  &scc_info_StopQueryReply_WorkerRPCService_2eproto.base,
  &scc_info_StopQueryRequest_WorkerRPCService_2eproto.base,
  &scc_info_UndeployQueryReply_WorkerRPCService_2eproto.base,
  &scc_info_UndeployQueryRequest_WorkerRPCService_2eproto.base,
  &scc_info_UnregisterQueryReply_WorkerRPCService_2eproto.base,
  &scc_info_UnregisterQueryRequest_WorkerRPCService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_WorkerRPCService_2eproto_once;
static bool descriptor_table_WorkerRPCService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WorkerRPCService_2eproto = {
  &descriptor_table_WorkerRPCService_2eproto_initialized, descriptor_table_protodef_WorkerRPCService_2eproto, "WorkerRPCService.proto", 868,
  &descriptor_table_WorkerRPCService_2eproto_once, descriptor_table_WorkerRPCService_2eproto_sccs, descriptor_table_WorkerRPCService_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_WorkerRPCService_2eproto::offsets,
  file_level_metadata_WorkerRPCService_2eproto, 12, file_level_enum_descriptors_WorkerRPCService_2eproto, file_level_service_descriptors_WorkerRPCService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_WorkerRPCService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_WorkerRPCService_2eproto), true);

// ===================================================================

void DeployQueryRequest::InitAsDefaultInstance() {
}
class DeployQueryRequest::_Internal {
 public:
};

DeployQueryRequest::DeployQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeployQueryRequest)
}
DeployQueryRequest::DeployQueryRequest(const DeployQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eto().empty()) {
    eto_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eto_);
  }
  // @@protoc_insertion_point(copy_constructor:DeployQueryRequest)
}

void DeployQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeployQueryRequest_WorkerRPCService_2eproto.base);
  eto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeployQueryRequest::~DeployQueryRequest() {
  // @@protoc_insertion_point(destructor:DeployQueryRequest)
  SharedDtor();
}

void DeployQueryRequest::SharedDtor() {
  eto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeployQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeployQueryRequest& DeployQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeployQueryRequest_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void DeployQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeployQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeployQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string eto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_eto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeployQueryRequest.eto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeployQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeployQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string eto = 1;
  if (this->eto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eto().data(), static_cast<int>(this->_internal_eto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeployQueryRequest.eto");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_eto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeployQueryRequest)
  return target;
}

size_t DeployQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeployQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string eto = 1;
  if (this->eto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eto());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeployQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeployQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeployQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeployQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeployQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeployQueryRequest)
    MergeFrom(*source);
  }
}

void DeployQueryRequest::MergeFrom(const DeployQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeployQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eto().size() > 0) {

    eto_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eto_);
  }
}

void DeployQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeployQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeployQueryRequest::CopyFrom(const DeployQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeployQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployQueryRequest::IsInitialized() const {
  return true;
}

void DeployQueryRequest::InternalSwap(DeployQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  eto_.Swap(&other->eto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeployQueryReply::InitAsDefaultInstance() {
}
class DeployQueryReply::_Internal {
 public:
};

DeployQueryReply::DeployQueryReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeployQueryReply)
}
DeployQueryReply::DeployQueryReply(const DeployQueryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DeployQueryReply)
}

void DeployQueryReply::SharedCtor() {
  success_ = false;
}

DeployQueryReply::~DeployQueryReply() {
  // @@protoc_insertion_point(destructor:DeployQueryReply)
  SharedDtor();
}

void DeployQueryReply::SharedDtor() {
}

void DeployQueryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeployQueryReply& DeployQueryReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeployQueryReply_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void DeployQueryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:DeployQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* DeployQueryReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeployQueryReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeployQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeployQueryReply)
  return target;
}

size_t DeployQueryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeployQueryReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeployQueryReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeployQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DeployQueryReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeployQueryReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeployQueryReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeployQueryReply)
    MergeFrom(*source);
  }
}

void DeployQueryReply::MergeFrom(const DeployQueryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeployQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void DeployQueryReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeployQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeployQueryReply::CopyFrom(const DeployQueryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeployQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployQueryReply::IsInitialized() const {
  return true;
}

void DeployQueryReply::InternalSwap(DeployQueryReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployQueryReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UndeployQueryRequest::InitAsDefaultInstance() {
}
class UndeployQueryRequest::_Internal {
 public:
};

UndeployQueryRequest::UndeployQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UndeployQueryRequest)
}
UndeployQueryRequest::UndeployQueryRequest(const UndeployQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queryid().empty()) {
    queryid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  // @@protoc_insertion_point(copy_constructor:UndeployQueryRequest)
}

void UndeployQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UndeployQueryRequest_WorkerRPCService_2eproto.base);
  queryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UndeployQueryRequest::~UndeployQueryRequest() {
  // @@protoc_insertion_point(destructor:UndeployQueryRequest)
  SharedDtor();
}

void UndeployQueryRequest::SharedDtor() {
  queryid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UndeployQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UndeployQueryRequest& UndeployQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UndeployQueryRequest_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void UndeployQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UndeployQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queryid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UndeployQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queryId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queryid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UndeployQueryRequest.queryId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndeployQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UndeployQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queryId = 1;
  if (this->queryid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queryid().data(), static_cast<int>(this->_internal_queryid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UndeployQueryRequest.queryId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UndeployQueryRequest)
  return target;
}

size_t UndeployQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UndeployQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queryId = 1;
  if (this->queryid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queryid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndeployQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UndeployQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UndeployQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UndeployQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UndeployQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UndeployQueryRequest)
    MergeFrom(*source);
  }
}

void UndeployQueryRequest::MergeFrom(const UndeployQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UndeployQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queryid().size() > 0) {

    queryid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
}

void UndeployQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UndeployQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndeployQueryRequest::CopyFrom(const UndeployQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UndeployQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndeployQueryRequest::IsInitialized() const {
  return true;
}

void UndeployQueryRequest::InternalSwap(UndeployQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queryid_.Swap(&other->queryid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UndeployQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UndeployQueryReply::InitAsDefaultInstance() {
}
class UndeployQueryReply::_Internal {
 public:
};

UndeployQueryReply::UndeployQueryReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UndeployQueryReply)
}
UndeployQueryReply::UndeployQueryReply(const UndeployQueryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:UndeployQueryReply)
}

void UndeployQueryReply::SharedCtor() {
  success_ = false;
}

UndeployQueryReply::~UndeployQueryReply() {
  // @@protoc_insertion_point(destructor:UndeployQueryReply)
  SharedDtor();
}

void UndeployQueryReply::SharedDtor() {
}

void UndeployQueryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UndeployQueryReply& UndeployQueryReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UndeployQueryReply_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void UndeployQueryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:UndeployQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* UndeployQueryReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndeployQueryReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UndeployQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UndeployQueryReply)
  return target;
}

size_t UndeployQueryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UndeployQueryReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndeployQueryReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UndeployQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UndeployQueryReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UndeployQueryReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UndeployQueryReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UndeployQueryReply)
    MergeFrom(*source);
  }
}

void UndeployQueryReply::MergeFrom(const UndeployQueryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UndeployQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UndeployQueryReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UndeployQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndeployQueryReply::CopyFrom(const UndeployQueryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UndeployQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndeployQueryReply::IsInitialized() const {
  return true;
}

void UndeployQueryReply::InternalSwap(UndeployQueryReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndeployQueryReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterQueryRequest::InitAsDefaultInstance() {
}
class RegisterQueryRequest::_Internal {
 public:
};

RegisterQueryRequest::RegisterQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterQueryRequest)
}
RegisterQueryRequest::RegisterQueryRequest(const RegisterQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_eto().empty()) {
    eto_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eto_);
  }
  // @@protoc_insertion_point(copy_constructor:RegisterQueryRequest)
}

void RegisterQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterQueryRequest_WorkerRPCService_2eproto.base);
  eto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterQueryRequest::~RegisterQueryRequest() {
  // @@protoc_insertion_point(destructor:RegisterQueryRequest)
  SharedDtor();
}

void RegisterQueryRequest::SharedDtor() {
  eto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterQueryRequest& RegisterQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterQueryRequest_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void RegisterQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string eto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_eto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterQueryRequest.eto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string eto = 1;
  if (this->eto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eto().data(), static_cast<int>(this->_internal_eto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterQueryRequest.eto");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_eto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterQueryRequest)
  return target;
}

size_t RegisterQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string eto = 1;
  if (this->eto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eto());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterQueryRequest)
    MergeFrom(*source);
  }
}

void RegisterQueryRequest::MergeFrom(const RegisterQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eto().size() > 0) {

    eto_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.eto_);
  }
}

void RegisterQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterQueryRequest::CopyFrom(const RegisterQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterQueryRequest::IsInitialized() const {
  return true;
}

void RegisterQueryRequest::InternalSwap(RegisterQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  eto_.Swap(&other->eto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterQueryReply::InitAsDefaultInstance() {
}
class RegisterQueryReply::_Internal {
 public:
};

RegisterQueryReply::RegisterQueryReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterQueryReply)
}
RegisterQueryReply::RegisterQueryReply(const RegisterQueryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:RegisterQueryReply)
}

void RegisterQueryReply::SharedCtor() {
  success_ = false;
}

RegisterQueryReply::~RegisterQueryReply() {
  // @@protoc_insertion_point(destructor:RegisterQueryReply)
  SharedDtor();
}

void RegisterQueryReply::SharedDtor() {
}

void RegisterQueryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterQueryReply& RegisterQueryReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterQueryReply_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void RegisterQueryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* RegisterQueryReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterQueryReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterQueryReply)
  return target;
}

size_t RegisterQueryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterQueryReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterQueryReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterQueryReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterQueryReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterQueryReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterQueryReply)
    MergeFrom(*source);
  }
}

void RegisterQueryReply::MergeFrom(const RegisterQueryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RegisterQueryReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterQueryReply::CopyFrom(const RegisterQueryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterQueryReply::IsInitialized() const {
  return true;
}

void RegisterQueryReply::InternalSwap(RegisterQueryReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterQueryReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterQueryRequest::InitAsDefaultInstance() {
}
class UnregisterQueryRequest::_Internal {
 public:
};

UnregisterQueryRequest::UnregisterQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnregisterQueryRequest)
}
UnregisterQueryRequest::UnregisterQueryRequest(const UnregisterQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queryid().empty()) {
    queryid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  // @@protoc_insertion_point(copy_constructor:UnregisterQueryRequest)
}

void UnregisterQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnregisterQueryRequest_WorkerRPCService_2eproto.base);
  queryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnregisterQueryRequest::~UnregisterQueryRequest() {
  // @@protoc_insertion_point(destructor:UnregisterQueryRequest)
  SharedDtor();
}

void UnregisterQueryRequest::SharedDtor() {
  queryid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnregisterQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterQueryRequest& UnregisterQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterQueryRequest_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void UnregisterQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UnregisterQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queryid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UnregisterQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queryId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queryid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnregisterQueryRequest.queryId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnregisterQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queryId = 1;
  if (this->queryid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queryid().data(), static_cast<int>(this->_internal_queryid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnregisterQueryRequest.queryId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnregisterQueryRequest)
  return target;
}

size_t UnregisterQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnregisterQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queryId = 1;
  if (this->queryid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queryid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnregisterQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnregisterQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnregisterQueryRequest)
    MergeFrom(*source);
  }
}

void UnregisterQueryRequest::MergeFrom(const UnregisterQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnregisterQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queryid().size() > 0) {

    queryid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
}

void UnregisterQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnregisterQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterQueryRequest::CopyFrom(const UnregisterQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnregisterQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterQueryRequest::IsInitialized() const {
  return true;
}

void UnregisterQueryRequest::InternalSwap(UnregisterQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queryid_.Swap(&other->queryid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterQueryReply::InitAsDefaultInstance() {
}
class UnregisterQueryReply::_Internal {
 public:
};

UnregisterQueryReply::UnregisterQueryReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnregisterQueryReply)
}
UnregisterQueryReply::UnregisterQueryReply(const UnregisterQueryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:UnregisterQueryReply)
}

void UnregisterQueryReply::SharedCtor() {
  success_ = false;
}

UnregisterQueryReply::~UnregisterQueryReply() {
  // @@protoc_insertion_point(destructor:UnregisterQueryReply)
  SharedDtor();
}

void UnregisterQueryReply::SharedDtor() {
}

void UnregisterQueryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterQueryReply& UnregisterQueryReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterQueryReply_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void UnregisterQueryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:UnregisterQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* UnregisterQueryReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterQueryReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnregisterQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnregisterQueryReply)
  return target;
}

size_t UnregisterQueryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnregisterQueryReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterQueryReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnregisterQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterQueryReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterQueryReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnregisterQueryReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnregisterQueryReply)
    MergeFrom(*source);
  }
}

void UnregisterQueryReply::MergeFrom(const UnregisterQueryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnregisterQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UnregisterQueryReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnregisterQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterQueryReply::CopyFrom(const UnregisterQueryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnregisterQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterQueryReply::IsInitialized() const {
  return true;
}

void UnregisterQueryReply::InternalSwap(UnregisterQueryReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterQueryReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartQueryRequest::InitAsDefaultInstance() {
}
class StartQueryRequest::_Internal {
 public:
};

StartQueryRequest::StartQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartQueryRequest)
}
StartQueryRequest::StartQueryRequest(const StartQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queryid().empty()) {
    queryid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  // @@protoc_insertion_point(copy_constructor:StartQueryRequest)
}

void StartQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartQueryRequest_WorkerRPCService_2eproto.base);
  queryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartQueryRequest::~StartQueryRequest() {
  // @@protoc_insertion_point(destructor:StartQueryRequest)
  SharedDtor();
}

void StartQueryRequest::SharedDtor() {
  queryid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartQueryRequest& StartQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartQueryRequest_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void StartQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StartQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queryid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StartQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queryId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queryid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StartQueryRequest.queryId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queryId = 1;
  if (this->queryid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queryid().data(), static_cast<int>(this->_internal_queryid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StartQueryRequest.queryId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartQueryRequest)
  return target;
}

size_t StartQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queryId = 1;
  if (this->queryid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queryid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartQueryRequest)
    MergeFrom(*source);
  }
}

void StartQueryRequest::MergeFrom(const StartQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queryid().size() > 0) {

    queryid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
}

void StartQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartQueryRequest::CopyFrom(const StartQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartQueryRequest::IsInitialized() const {
  return true;
}

void StartQueryRequest::InternalSwap(StartQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queryid_.Swap(&other->queryid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StartQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartQueryReply::InitAsDefaultInstance() {
}
class StartQueryReply::_Internal {
 public:
};

StartQueryReply::StartQueryReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartQueryReply)
}
StartQueryReply::StartQueryReply(const StartQueryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:StartQueryReply)
}

void StartQueryReply::SharedCtor() {
  success_ = false;
}

StartQueryReply::~StartQueryReply() {
  // @@protoc_insertion_point(destructor:StartQueryReply)
  SharedDtor();
}

void StartQueryReply::SharedDtor() {
}

void StartQueryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartQueryReply& StartQueryReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartQueryReply_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void StartQueryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:StartQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* StartQueryReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartQueryReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartQueryReply)
  return target;
}

size_t StartQueryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartQueryReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartQueryReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StartQueryReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartQueryReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartQueryReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartQueryReply)
    MergeFrom(*source);
  }
}

void StartQueryReply::MergeFrom(const StartQueryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void StartQueryReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartQueryReply::CopyFrom(const StartQueryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartQueryReply::IsInitialized() const {
  return true;
}

void StartQueryReply::InternalSwap(StartQueryReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartQueryReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopQueryRequest::InitAsDefaultInstance() {
}
class StopQueryRequest::_Internal {
 public:
};

StopQueryRequest::StopQueryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopQueryRequest)
}
StopQueryRequest::StopQueryRequest(const StopQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queryid().empty()) {
    queryid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
  // @@protoc_insertion_point(copy_constructor:StopQueryRequest)
}

void StopQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopQueryRequest_WorkerRPCService_2eproto.base);
  queryid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopQueryRequest::~StopQueryRequest() {
  // @@protoc_insertion_point(destructor:StopQueryRequest)
  SharedDtor();
}

void StopQueryRequest::SharedDtor() {
  queryid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopQueryRequest& StopQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopQueryRequest_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void StopQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StopQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queryid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StopQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string queryId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_queryid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StopQueryRequest.queryId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queryId = 1;
  if (this->queryid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queryid().data(), static_cast<int>(this->_internal_queryid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StopQueryRequest.queryId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_queryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopQueryRequest)
  return target;
}

size_t StopQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queryId = 1;
  if (this->queryid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queryid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopQueryRequest)
    MergeFrom(*source);
  }
}

void StopQueryRequest::MergeFrom(const StopQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queryid().size() > 0) {

    queryid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.queryid_);
  }
}

void StopQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopQueryRequest::CopyFrom(const StopQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopQueryRequest::IsInitialized() const {
  return true;
}

void StopQueryRequest::InternalSwap(StopQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queryid_.Swap(&other->queryid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopQueryReply::InitAsDefaultInstance() {
}
class StopQueryReply::_Internal {
 public:
};

StopQueryReply::StopQueryReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopQueryReply)
}
StopQueryReply::StopQueryReply(const StopQueryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:StopQueryReply)
}

void StopQueryReply::SharedCtor() {
  success_ = false;
}

StopQueryReply::~StopQueryReply() {
  // @@protoc_insertion_point(destructor:StopQueryReply)
  SharedDtor();
}

void StopQueryReply::SharedDtor() {
}

void StopQueryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopQueryReply& StopQueryReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopQueryReply_WorkerRPCService_2eproto.base);
  return *internal_default_instance();
}


void StopQueryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:StopQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* StopQueryReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopQueryReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopQueryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopQueryReply)
  return target;
}

size_t StopQueryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopQueryReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopQueryReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StopQueryReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopQueryReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopQueryReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopQueryReply)
    MergeFrom(*source);
  }
}

void StopQueryReply::MergeFrom(const StopQueryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopQueryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void StopQueryReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopQueryReply::CopyFrom(const StopQueryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopQueryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopQueryReply::IsInitialized() const {
  return true;
}

void StopQueryReply::InternalSwap(StopQueryReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopQueryReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DeployQueryRequest* Arena::CreateMaybeMessage< ::DeployQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DeployQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DeployQueryReply* Arena::CreateMaybeMessage< ::DeployQueryReply >(Arena* arena) {
  return Arena::CreateInternal< ::DeployQueryReply >(arena);
}
template<> PROTOBUF_NOINLINE ::UndeployQueryRequest* Arena::CreateMaybeMessage< ::UndeployQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UndeployQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UndeployQueryReply* Arena::CreateMaybeMessage< ::UndeployQueryReply >(Arena* arena) {
  return Arena::CreateInternal< ::UndeployQueryReply >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterQueryRequest* Arena::CreateMaybeMessage< ::RegisterQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterQueryReply* Arena::CreateMaybeMessage< ::RegisterQueryReply >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterQueryReply >(arena);
}
template<> PROTOBUF_NOINLINE ::UnregisterQueryRequest* Arena::CreateMaybeMessage< ::UnregisterQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UnregisterQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UnregisterQueryReply* Arena::CreateMaybeMessage< ::UnregisterQueryReply >(Arena* arena) {
  return Arena::CreateInternal< ::UnregisterQueryReply >(arena);
}
template<> PROTOBUF_NOINLINE ::StartQueryRequest* Arena::CreateMaybeMessage< ::StartQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::StartQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StartQueryReply* Arena::CreateMaybeMessage< ::StartQueryReply >(Arena* arena) {
  return Arena::CreateInternal< ::StartQueryReply >(arena);
}
template<> PROTOBUF_NOINLINE ::StopQueryRequest* Arena::CreateMaybeMessage< ::StopQueryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::StopQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StopQueryReply* Arena::CreateMaybeMessage< ::StopQueryReply >(Arena* arena) {
  return Arena::CreateInternal< ::StopQueryReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
