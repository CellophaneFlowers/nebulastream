// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Coordinator.proto

#include <GRPC/Coordinator.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class RegisterNodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterNodeRequest> _instance;
} _RegisterNodeRequest_default_instance_;
class RegisterNodeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterNodeReply> _instance;
} _RegisterNodeReply_default_instance_;
class UnregisterNodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterNodeRequest> _instance;
} _UnregisterNodeRequest_default_instance_;
class UnregisterNodeReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterNodeReply> _instance;
} _UnregisterNodeReply_default_instance_;
class RegisterPhysicalStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterPhysicalStreamRequest> _instance;
} _RegisterPhysicalStreamRequest_default_instance_;
class RegisterPhysicalStreamReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterPhysicalStreamReply> _instance;
} _RegisterPhysicalStreamReply_default_instance_;
class UnregisterPhysicalStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterPhysicalStreamRequest> _instance;
} _UnregisterPhysicalStreamRequest_default_instance_;
class UnregisterPhysicalStreamReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterPhysicalStreamReply> _instance;
} _UnregisterPhysicalStreamReply_default_instance_;
class RegisterLogicalStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterLogicalStreamRequest> _instance;
} _RegisterLogicalStreamRequest_default_instance_;
class RegisterLogicalStreamReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterLogicalStreamReply> _instance;
} _RegisterLogicalStreamReply_default_instance_;
class UnregisterLogicalStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterLogicalStreamRequest> _instance;
} _UnregisterLogicalStreamRequest_default_instance_;
class UnregisterLogicalStreamReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterLogicalStreamReply> _instance;
} _UnregisterLogicalStreamReply_default_instance_;
class AddParentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddParentRequest> _instance;
} _AddParentRequest_default_instance_;
class AddParentReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddParentReply> _instance;
} _AddParentReply_default_instance_;
class RemoveParentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveParentRequest> _instance;
} _RemoveParentRequest_default_instance_;
class RemoveParentReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveParentReply> _instance;
} _RemoveParentReply_default_instance_;
static void InitDefaultsscc_info_AddParentReply_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AddParentReply_default_instance_;
    new (ptr) ::AddParentReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AddParentReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddParentReply_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddParentReply_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_AddParentRequest_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AddParentRequest_default_instance_;
    new (ptr) ::AddParentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AddParentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddParentRequest_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddParentRequest_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RegisterLogicalStreamReply_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterLogicalStreamReply_default_instance_;
    new (ptr) ::RegisterLogicalStreamReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterLogicalStreamReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterLogicalStreamReply_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterLogicalStreamReply_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RegisterLogicalStreamRequest_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterLogicalStreamRequest_default_instance_;
    new (ptr) ::RegisterLogicalStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterLogicalStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterLogicalStreamRequest_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterLogicalStreamRequest_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RegisterNodeReply_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterNodeReply_default_instance_;
    new (ptr) ::RegisterNodeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterNodeReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterNodeReply_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterNodeReply_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RegisterNodeRequest_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterNodeRequest_default_instance_;
    new (ptr) ::RegisterNodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterNodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterNodeRequest_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterNodeRequest_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RegisterPhysicalStreamReply_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterPhysicalStreamReply_default_instance_;
    new (ptr) ::RegisterPhysicalStreamReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterPhysicalStreamReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPhysicalStreamReply_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterPhysicalStreamReply_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RegisterPhysicalStreamRequest_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterPhysicalStreamRequest_default_instance_;
    new (ptr) ::RegisterPhysicalStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterPhysicalStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPhysicalStreamRequest_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterPhysicalStreamRequest_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RemoveParentReply_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoveParentReply_default_instance_;
    new (ptr) ::RemoveParentReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoveParentReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveParentReply_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveParentReply_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RemoveParentRequest_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoveParentRequest_default_instance_;
    new (ptr) ::RemoveParentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoveParentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveParentRequest_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveParentRequest_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_UnregisterLogicalStreamReply_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnregisterLogicalStreamReply_default_instance_;
    new (ptr) ::UnregisterLogicalStreamReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnregisterLogicalStreamReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnregisterLogicalStreamReply_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnregisterLogicalStreamReply_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_UnregisterLogicalStreamRequest_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnregisterLogicalStreamRequest_default_instance_;
    new (ptr) ::UnregisterLogicalStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnregisterLogicalStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnregisterLogicalStreamRequest_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnregisterLogicalStreamRequest_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_UnregisterNodeReply_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnregisterNodeReply_default_instance_;
    new (ptr) ::UnregisterNodeReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnregisterNodeReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnregisterNodeReply_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnregisterNodeReply_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_UnregisterNodeRequest_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnregisterNodeRequest_default_instance_;
    new (ptr) ::UnregisterNodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnregisterNodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnregisterNodeRequest_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnregisterNodeRequest_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_UnregisterPhysicalStreamReply_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnregisterPhysicalStreamReply_default_instance_;
    new (ptr) ::UnregisterPhysicalStreamReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnregisterPhysicalStreamReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnregisterPhysicalStreamReply_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnregisterPhysicalStreamReply_Coordinator_2eproto}, {}};

static void InitDefaultsscc_info_UnregisterPhysicalStreamRequest_Coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnregisterPhysicalStreamRequest_default_instance_;
    new (ptr) ::UnregisterPhysicalStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnregisterPhysicalStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnregisterPhysicalStreamRequest_Coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnregisterPhysicalStreamRequest_Coordinator_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Coordinator_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Coordinator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Coordinator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Coordinator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRequest, rpcport_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRequest, zmqport_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRequest, numberofcpus_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRequest, nodeproperties_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeReply, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnregisterNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnregisterNodeRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnregisterNodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnregisterNodeReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamRequest, id_),
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamRequest, sourcetype_),
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamRequest, sourceconf_),
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamRequest, sourcefrequency_),
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamRequest, numberofbufferstoproduce_),
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamRequest, physicalstreamname_),
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamRequest, logicalstreamname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterPhysicalStreamReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnregisterPhysicalStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnregisterPhysicalStreamRequest, id_),
  PROTOBUF_FIELD_OFFSET(::UnregisterPhysicalStreamRequest, physicalstreamname_),
  PROTOBUF_FIELD_OFFSET(::UnregisterPhysicalStreamRequest, logicalstreamname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnregisterPhysicalStreamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnregisterPhysicalStreamReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterLogicalStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterLogicalStreamRequest, id_),
  PROTOBUF_FIELD_OFFSET(::RegisterLogicalStreamRequest, streamname_),
  PROTOBUF_FIELD_OFFSET(::RegisterLogicalStreamRequest, streamschema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterLogicalStreamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegisterLogicalStreamReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnregisterLogicalStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnregisterLogicalStreamRequest, id_),
  PROTOBUF_FIELD_OFFSET(::UnregisterLogicalStreamRequest, streamname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnregisterLogicalStreamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnregisterLogicalStreamReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddParentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AddParentRequest, childid_),
  PROTOBUF_FIELD_OFFSET(::AddParentRequest, parentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddParentReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AddParentReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoveParentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoveParentRequest, childid_),
  PROTOBUF_FIELD_OFFSET(::RemoveParentRequest, parentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoveParentReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoveParentReply, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RegisterNodeRequest)},
  { 11, -1, sizeof(::RegisterNodeReply)},
  { 17, -1, sizeof(::UnregisterNodeRequest)},
  { 23, -1, sizeof(::UnregisterNodeReply)},
  { 29, -1, sizeof(::RegisterPhysicalStreamRequest)},
  { 41, -1, sizeof(::RegisterPhysicalStreamReply)},
  { 47, -1, sizeof(::UnregisterPhysicalStreamRequest)},
  { 55, -1, sizeof(::UnregisterPhysicalStreamReply)},
  { 61, -1, sizeof(::RegisterLogicalStreamRequest)},
  { 69, -1, sizeof(::RegisterLogicalStreamReply)},
  { 75, -1, sizeof(::UnregisterLogicalStreamRequest)},
  { 82, -1, sizeof(::UnregisterLogicalStreamReply)},
  { 88, -1, sizeof(::AddParentRequest)},
  { 95, -1, sizeof(::AddParentReply)},
  { 101, -1, sizeof(::RemoveParentRequest)},
  { 108, -1, sizeof(::RemoveParentReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterNodeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnregisterNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnregisterNodeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterPhysicalStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterPhysicalStreamReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnregisterPhysicalStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnregisterPhysicalStreamReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterLogicalStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegisterLogicalStreamReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnregisterLogicalStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnregisterLogicalStreamReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AddParentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AddParentReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoveParentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoveParentReply_default_instance_),
};

const char descriptor_table_protodef_Coordinator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021Coordinator.proto\"\177\n\023RegisterNodeReque"
  "st\022\n\n\002ip\030\001 \001(\t\022\017\n\007rpcPort\030\002 \001(\005\022\017\n\007zmqPo"
  "rt\030\003 \001(\005\022\024\n\014numberOfCpus\030\004 \001(\005\022\026\n\016nodePr"
  "operties\030\005 \001(\t\022\014\n\004type\030\006 \001(\005\"\037\n\021Register"
  "NodeReply\022\n\n\002id\030\001 \001(\003\"#\n\025UnregisterNodeR"
  "equest\022\n\n\002id\030\001 \001(\003\"&\n\023UnregisterNodeRepl"
  "y\022\017\n\007success\030\001 \001(\010\"\305\001\n\035RegisterPhysicalS"
  "treamRequest\022\n\n\002id\030\001 \001(\003\022\022\n\nsourceType\030\002"
  " \001(\t\022\022\n\nsourceConf\030\003 \001(\t\022\027\n\017sourceFreque"
  "ncy\030\004 \001(\003\022 \n\030numberOfBuffersToProduce\030\005 "
  "\001(\003\022\032\n\022physicalStreamName\030\006 \001(\t\022\031\n\021logic"
  "alStreamName\030\007 \001(\t\".\n\033RegisterPhysicalSt"
  "reamReply\022\017\n\007success\030\001 \001(\010\"d\n\037Unregister"
  "PhysicalStreamRequest\022\n\n\002id\030\001 \001(\003\022\032\n\022phy"
  "sicalStreamName\030\002 \001(\t\022\031\n\021logicalStreamNa"
  "me\030\003 \001(\t\"0\n\035UnregisterPhysicalStreamRepl"
  "y\022\017\n\007success\030\001 \001(\010\"T\n\034RegisterLogicalStr"
  "eamRequest\022\n\n\002id\030\001 \001(\003\022\022\n\nstreamName\030\002 \001"
  "(\t\022\024\n\014streamSchema\030\003 \001(\t\"-\n\032RegisterLogi"
  "calStreamReply\022\017\n\007success\030\001 \001(\010\"@\n\036Unreg"
  "isterLogicalStreamRequest\022\n\n\002id\030\001 \001(\003\022\022\n"
  "\nstreamName\030\002 \001(\t\"/\n\034UnregisterLogicalSt"
  "reamReply\022\017\n\007success\030\001 \001(\010\"5\n\020AddParentR"
  "equest\022\017\n\007childId\030\001 \001(\003\022\020\n\010parentId\030\002 \001("
  "\003\"!\n\016AddParentReply\022\017\n\007success\030\001 \001(\010\"8\n\023"
  "RemoveParentRequest\022\017\n\007childId\030\001 \001(\003\022\020\n\010"
  "parentId\030\002 \001(\003\"$\n\021RemoveParentReply\022\017\n\007s"
  "uccess\030\001 \001(\0102\357\004\n\022CoordinatorService\022:\n\014R"
  "egisterNode\022\024.RegisterNodeRequest\032\022.Regi"
  "sterNodeReply\"\000\022@\n\016UnregisterNode\022\026.Unre"
  "gisterNodeRequest\032\024.UnregisterNodeReply\""
  "\000\022X\n\026RegisterPhysicalStream\022\036.RegisterPh"
  "ysicalStreamRequest\032\034.RegisterPhysicalSt"
  "reamReply\"\000\022^\n\030UnregisterPhysicalStream\022"
  " .UnregisterPhysicalStreamRequest\032\036.Unre"
  "gisterPhysicalStreamReply\"\000\022U\n\025RegisterL"
  "ogicalStream\022\035.RegisterLogicalStreamRequ"
  "est\032\033.RegisterLogicalStreamReply\"\000\022[\n\027Un"
  "registerLogicalStream\022\037.UnregisterLogica"
  "lStreamRequest\032\035.UnregisterLogicalStream"
  "Reply\"\000\0221\n\tAddParent\022\021.AddParentRequest\032"
  "\017.AddParentReply\"\000\022:\n\014RemoveParent\022\024.Rem"
  "oveParentRequest\032\022.RemoveParentReply\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Coordinator_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Coordinator_2eproto_sccs[16] = {
  &scc_info_AddParentReply_Coordinator_2eproto.base,
  &scc_info_AddParentRequest_Coordinator_2eproto.base,
  &scc_info_RegisterLogicalStreamReply_Coordinator_2eproto.base,
  &scc_info_RegisterLogicalStreamRequest_Coordinator_2eproto.base,
  &scc_info_RegisterNodeReply_Coordinator_2eproto.base,
  &scc_info_RegisterNodeRequest_Coordinator_2eproto.base,
  &scc_info_RegisterPhysicalStreamReply_Coordinator_2eproto.base,
  &scc_info_RegisterPhysicalStreamRequest_Coordinator_2eproto.base,
  &scc_info_RemoveParentReply_Coordinator_2eproto.base,
  &scc_info_RemoveParentRequest_Coordinator_2eproto.base,
  &scc_info_UnregisterLogicalStreamReply_Coordinator_2eproto.base,
  &scc_info_UnregisterLogicalStreamRequest_Coordinator_2eproto.base,
  &scc_info_UnregisterNodeReply_Coordinator_2eproto.base,
  &scc_info_UnregisterNodeRequest_Coordinator_2eproto.base,
  &scc_info_UnregisterPhysicalStreamReply_Coordinator_2eproto.base,
  &scc_info_UnregisterPhysicalStreamRequest_Coordinator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Coordinator_2eproto_once;
static bool descriptor_table_Coordinator_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Coordinator_2eproto = {
  &descriptor_table_Coordinator_2eproto_initialized, descriptor_table_protodef_Coordinator_2eproto, "Coordinator.proto", 1726,
  &descriptor_table_Coordinator_2eproto_once, descriptor_table_Coordinator_2eproto_sccs, descriptor_table_Coordinator_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_Coordinator_2eproto::offsets,
  file_level_metadata_Coordinator_2eproto, 16, file_level_enum_descriptors_Coordinator_2eproto, file_level_service_descriptors_Coordinator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Coordinator_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Coordinator_2eproto), true);

// ===================================================================

void RegisterNodeRequest::InitAsDefaultInstance() {
}
class RegisterNodeRequest::_Internal {
 public:
};

RegisterNodeRequest::RegisterNodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterNodeRequest)
}
RegisterNodeRequest::RegisterNodeRequest(const RegisterNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  nodeproperties_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodeproperties().empty()) {
    nodeproperties_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodeproperties_);
  }
  ::memcpy(&rpcport_, &from.rpcport_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&rpcport_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:RegisterNodeRequest)
}

void RegisterNodeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterNodeRequest_Coordinator_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeproperties_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rpcport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&rpcport_)) + sizeof(type_));
}

RegisterNodeRequest::~RegisterNodeRequest() {
  // @@protoc_insertion_point(destructor:RegisterNodeRequest)
  SharedDtor();
}

void RegisterNodeRequest::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeproperties_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterNodeRequest& RegisterNodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterNodeRequest_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void RegisterNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeproperties_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rpcport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&rpcport_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* RegisterNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterNodeRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rpcPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rpcport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zmqPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          zmqport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numberOfCpus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          numberofcpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodeProperties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nodeproperties();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterNodeRequest.nodeProperties"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterNodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterNodeRequest.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 rpcPort = 2;
  if (this->rpcport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rpcport(), target);
  }

  // int32 zmqPort = 3;
  if (this->zmqport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_zmqport(), target);
  }

  // int32 numberOfCpus = 4;
  if (this->numberofcpus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_numberofcpus(), target);
  }

  // string nodeProperties = 5;
  if (this->nodeproperties().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeproperties().data(), static_cast<int>(this->_internal_nodeproperties().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterNodeRequest.nodeProperties");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nodeproperties(), target);
  }

  // int32 type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterNodeRequest)
  return target;
}

size_t RegisterNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterNodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string nodeProperties = 5;
  if (this->nodeproperties().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeproperties());
  }

  // int32 rpcPort = 2;
  if (this->rpcport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rpcport());
  }

  // int32 zmqPort = 3;
  if (this->zmqport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zmqport());
  }

  // int32 numberOfCpus = 4;
  if (this->numberofcpus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofcpus());
  }

  // int32 type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterNodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterNodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterNodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterNodeRequest)
    MergeFrom(*source);
  }
}

void RegisterNodeRequest::MergeFrom(const RegisterNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.nodeproperties().size() > 0) {

    nodeproperties_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodeproperties_);
  }
  if (from.rpcport() != 0) {
    _internal_set_rpcport(from._internal_rpcport());
  }
  if (from.zmqport() != 0) {
    _internal_set_zmqport(from._internal_zmqport());
  }
  if (from.numberofcpus() != 0) {
    _internal_set_numberofcpus(from._internal_numberofcpus());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RegisterNodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterNodeRequest::CopyFrom(const RegisterNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeRequest::IsInitialized() const {
  return true;
}

void RegisterNodeRequest::InternalSwap(RegisterNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nodeproperties_.Swap(&other->nodeproperties_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rpcport_, other->rpcport_);
  swap(zmqport_, other->zmqport_);
  swap(numberofcpus_, other->numberofcpus_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterNodeReply::InitAsDefaultInstance() {
}
class RegisterNodeReply::_Internal {
 public:
};

RegisterNodeReply::RegisterNodeReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterNodeReply)
}
RegisterNodeReply::RegisterNodeReply(const RegisterNodeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:RegisterNodeReply)
}

void RegisterNodeReply::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

RegisterNodeReply::~RegisterNodeReply() {
  // @@protoc_insertion_point(destructor:RegisterNodeReply)
  SharedDtor();
}

void RegisterNodeReply::SharedDtor() {
}

void RegisterNodeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterNodeReply& RegisterNodeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterNodeReply_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void RegisterNodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterNodeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RegisterNodeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterNodeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterNodeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterNodeReply)
  return target;
}

size_t RegisterNodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterNodeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterNodeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterNodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterNodeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterNodeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterNodeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterNodeReply)
    MergeFrom(*source);
  }
}

void RegisterNodeReply::MergeFrom(const RegisterNodeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterNodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RegisterNodeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterNodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterNodeReply::CopyFrom(const RegisterNodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterNodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeReply::IsInitialized() const {
  return true;
}

void RegisterNodeReply::InternalSwap(RegisterNodeReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterNodeRequest::InitAsDefaultInstance() {
}
class UnregisterNodeRequest::_Internal {
 public:
};

UnregisterNodeRequest::UnregisterNodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnregisterNodeRequest)
}
UnregisterNodeRequest::UnregisterNodeRequest(const UnregisterNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:UnregisterNodeRequest)
}

void UnregisterNodeRequest::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

UnregisterNodeRequest::~UnregisterNodeRequest() {
  // @@protoc_insertion_point(destructor:UnregisterNodeRequest)
  SharedDtor();
}

void UnregisterNodeRequest::SharedDtor() {
}

void UnregisterNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterNodeRequest& UnregisterNodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterNodeRequest_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void UnregisterNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UnregisterNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* UnregisterNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterNodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnregisterNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnregisterNodeRequest)
  return target;
}

size_t UnregisterNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnregisterNodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterNodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnregisterNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterNodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnregisterNodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnregisterNodeRequest)
    MergeFrom(*source);
  }
}

void UnregisterNodeRequest::MergeFrom(const UnregisterNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnregisterNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UnregisterNodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnregisterNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterNodeRequest::CopyFrom(const UnregisterNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnregisterNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterNodeRequest::IsInitialized() const {
  return true;
}

void UnregisterNodeRequest::InternalSwap(UnregisterNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterNodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterNodeReply::InitAsDefaultInstance() {
}
class UnregisterNodeReply::_Internal {
 public:
};

UnregisterNodeReply::UnregisterNodeReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnregisterNodeReply)
}
UnregisterNodeReply::UnregisterNodeReply(const UnregisterNodeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:UnregisterNodeReply)
}

void UnregisterNodeReply::SharedCtor() {
  success_ = false;
}

UnregisterNodeReply::~UnregisterNodeReply() {
  // @@protoc_insertion_point(destructor:UnregisterNodeReply)
  SharedDtor();
}

void UnregisterNodeReply::SharedDtor() {
}

void UnregisterNodeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterNodeReply& UnregisterNodeReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterNodeReply_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void UnregisterNodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:UnregisterNodeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* UnregisterNodeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterNodeReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnregisterNodeReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnregisterNodeReply)
  return target;
}

size_t UnregisterNodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnregisterNodeReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterNodeReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnregisterNodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterNodeReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterNodeReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnregisterNodeReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnregisterNodeReply)
    MergeFrom(*source);
  }
}

void UnregisterNodeReply::MergeFrom(const UnregisterNodeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnregisterNodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UnregisterNodeReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnregisterNodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterNodeReply::CopyFrom(const UnregisterNodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnregisterNodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterNodeReply::IsInitialized() const {
  return true;
}

void UnregisterNodeReply::InternalSwap(UnregisterNodeReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterNodeReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterPhysicalStreamRequest::InitAsDefaultInstance() {
}
class RegisterPhysicalStreamRequest::_Internal {
 public:
};

RegisterPhysicalStreamRequest::RegisterPhysicalStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterPhysicalStreamRequest)
}
RegisterPhysicalStreamRequest::RegisterPhysicalStreamRequest(const RegisterPhysicalStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourcetype().empty()) {
    sourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcetype_);
  }
  sourceconf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourceconf().empty()) {
    sourceconf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourceconf_);
  }
  physicalstreamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_physicalstreamname().empty()) {
    physicalstreamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.physicalstreamname_);
  }
  logicalstreamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logicalstreamname().empty()) {
    logicalstreamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logicalstreamname_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofbufferstoproduce_) -
    reinterpret_cast<char*>(&id_)) + sizeof(numberofbufferstoproduce_));
  // @@protoc_insertion_point(copy_constructor:RegisterPhysicalStreamRequest)
}

void RegisterPhysicalStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterPhysicalStreamRequest_Coordinator_2eproto.base);
  sourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceconf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physicalstreamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logicalstreamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofbufferstoproduce_) -
      reinterpret_cast<char*>(&id_)) + sizeof(numberofbufferstoproduce_));
}

RegisterPhysicalStreamRequest::~RegisterPhysicalStreamRequest() {
  // @@protoc_insertion_point(destructor:RegisterPhysicalStreamRequest)
  SharedDtor();
}

void RegisterPhysicalStreamRequest::SharedDtor() {
  sourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceconf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physicalstreamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logicalstreamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterPhysicalStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterPhysicalStreamRequest& RegisterPhysicalStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterPhysicalStreamRequest_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void RegisterPhysicalStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterPhysicalStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceconf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physicalstreamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logicalstreamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofbufferstoproduce_) -
      reinterpret_cast<char*>(&id_)) + sizeof(numberofbufferstoproduce_));
  _internal_metadata_.Clear();
}

const char* RegisterPhysicalStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sourceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sourcetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterPhysicalStreamRequest.sourceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sourceConf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sourceconf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterPhysicalStreamRequest.sourceConf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sourceFrequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sourcefrequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 numberOfBuffersToProduce = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          numberofbufferstoproduce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string physicalStreamName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_physicalstreamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterPhysicalStreamRequest.physicalStreamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logicalStreamName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_logicalstreamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterPhysicalStreamRequest.logicalStreamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterPhysicalStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterPhysicalStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string sourceType = 2;
  if (this->sourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcetype().data(), static_cast<int>(this->_internal_sourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterPhysicalStreamRequest.sourceType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sourcetype(), target);
  }

  // string sourceConf = 3;
  if (this->sourceconf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceconf().data(), static_cast<int>(this->_internal_sourceconf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterPhysicalStreamRequest.sourceConf");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sourceconf(), target);
  }

  // int64 sourceFrequency = 4;
  if (this->sourcefrequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_sourcefrequency(), target);
  }

  // int64 numberOfBuffersToProduce = 5;
  if (this->numberofbufferstoproduce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_numberofbufferstoproduce(), target);
  }

  // string physicalStreamName = 6;
  if (this->physicalstreamname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physicalstreamname().data(), static_cast<int>(this->_internal_physicalstreamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterPhysicalStreamRequest.physicalStreamName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_physicalstreamname(), target);
  }

  // string logicalStreamName = 7;
  if (this->logicalstreamname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logicalstreamname().data(), static_cast<int>(this->_internal_logicalstreamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterPhysicalStreamRequest.logicalStreamName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_logicalstreamname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterPhysicalStreamRequest)
  return target;
}

size_t RegisterPhysicalStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterPhysicalStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceType = 2;
  if (this->sourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcetype());
  }

  // string sourceConf = 3;
  if (this->sourceconf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceconf());
  }

  // string physicalStreamName = 6;
  if (this->physicalstreamname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physicalstreamname());
  }

  // string logicalStreamName = 7;
  if (this->logicalstreamname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logicalstreamname());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 sourceFrequency = 4;
  if (this->sourcefrequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sourcefrequency());
  }

  // int64 numberOfBuffersToProduce = 5;
  if (this->numberofbufferstoproduce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_numberofbufferstoproduce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterPhysicalStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterPhysicalStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterPhysicalStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterPhysicalStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterPhysicalStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterPhysicalStreamRequest)
    MergeFrom(*source);
  }
}

void RegisterPhysicalStreamRequest::MergeFrom(const RegisterPhysicalStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterPhysicalStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourcetype().size() > 0) {

    sourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcetype_);
  }
  if (from.sourceconf().size() > 0) {

    sourceconf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourceconf_);
  }
  if (from.physicalstreamname().size() > 0) {

    physicalstreamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.physicalstreamname_);
  }
  if (from.logicalstreamname().size() > 0) {

    logicalstreamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logicalstreamname_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sourcefrequency() != 0) {
    _internal_set_sourcefrequency(from._internal_sourcefrequency());
  }
  if (from.numberofbufferstoproduce() != 0) {
    _internal_set_numberofbufferstoproduce(from._internal_numberofbufferstoproduce());
  }
}

void RegisterPhysicalStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterPhysicalStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPhysicalStreamRequest::CopyFrom(const RegisterPhysicalStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterPhysicalStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPhysicalStreamRequest::IsInitialized() const {
  return true;
}

void RegisterPhysicalStreamRequest::InternalSwap(RegisterPhysicalStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sourcetype_.Swap(&other->sourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sourceconf_.Swap(&other->sourceconf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  physicalstreamname_.Swap(&other->physicalstreamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logicalstreamname_.Swap(&other->logicalstreamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(sourcefrequency_, other->sourcefrequency_);
  swap(numberofbufferstoproduce_, other->numberofbufferstoproduce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPhysicalStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterPhysicalStreamReply::InitAsDefaultInstance() {
}
class RegisterPhysicalStreamReply::_Internal {
 public:
};

RegisterPhysicalStreamReply::RegisterPhysicalStreamReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterPhysicalStreamReply)
}
RegisterPhysicalStreamReply::RegisterPhysicalStreamReply(const RegisterPhysicalStreamReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:RegisterPhysicalStreamReply)
}

void RegisterPhysicalStreamReply::SharedCtor() {
  success_ = false;
}

RegisterPhysicalStreamReply::~RegisterPhysicalStreamReply() {
  // @@protoc_insertion_point(destructor:RegisterPhysicalStreamReply)
  SharedDtor();
}

void RegisterPhysicalStreamReply::SharedDtor() {
}

void RegisterPhysicalStreamReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterPhysicalStreamReply& RegisterPhysicalStreamReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterPhysicalStreamReply_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void RegisterPhysicalStreamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterPhysicalStreamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* RegisterPhysicalStreamReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterPhysicalStreamReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterPhysicalStreamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterPhysicalStreamReply)
  return target;
}

size_t RegisterPhysicalStreamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterPhysicalStreamReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterPhysicalStreamReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterPhysicalStreamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterPhysicalStreamReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterPhysicalStreamReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterPhysicalStreamReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterPhysicalStreamReply)
    MergeFrom(*source);
  }
}

void RegisterPhysicalStreamReply::MergeFrom(const RegisterPhysicalStreamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterPhysicalStreamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RegisterPhysicalStreamReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterPhysicalStreamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPhysicalStreamReply::CopyFrom(const RegisterPhysicalStreamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterPhysicalStreamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPhysicalStreamReply::IsInitialized() const {
  return true;
}

void RegisterPhysicalStreamReply::InternalSwap(RegisterPhysicalStreamReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPhysicalStreamReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterPhysicalStreamRequest::InitAsDefaultInstance() {
}
class UnregisterPhysicalStreamRequest::_Internal {
 public:
};

UnregisterPhysicalStreamRequest::UnregisterPhysicalStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnregisterPhysicalStreamRequest)
}
UnregisterPhysicalStreamRequest::UnregisterPhysicalStreamRequest(const UnregisterPhysicalStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  physicalstreamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_physicalstreamname().empty()) {
    physicalstreamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.physicalstreamname_);
  }
  logicalstreamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logicalstreamname().empty()) {
    logicalstreamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logicalstreamname_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:UnregisterPhysicalStreamRequest)
}

void UnregisterPhysicalStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnregisterPhysicalStreamRequest_Coordinator_2eproto.base);
  physicalstreamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logicalstreamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

UnregisterPhysicalStreamRequest::~UnregisterPhysicalStreamRequest() {
  // @@protoc_insertion_point(destructor:UnregisterPhysicalStreamRequest)
  SharedDtor();
}

void UnregisterPhysicalStreamRequest::SharedDtor() {
  physicalstreamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logicalstreamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnregisterPhysicalStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterPhysicalStreamRequest& UnregisterPhysicalStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterPhysicalStreamRequest_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void UnregisterPhysicalStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UnregisterPhysicalStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  physicalstreamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logicalstreamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* UnregisterPhysicalStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string physicalStreamName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_physicalstreamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnregisterPhysicalStreamRequest.physicalStreamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logicalStreamName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_logicalstreamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnregisterPhysicalStreamRequest.logicalStreamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterPhysicalStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnregisterPhysicalStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string physicalStreamName = 2;
  if (this->physicalstreamname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physicalstreamname().data(), static_cast<int>(this->_internal_physicalstreamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnregisterPhysicalStreamRequest.physicalStreamName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_physicalstreamname(), target);
  }

  // string logicalStreamName = 3;
  if (this->logicalstreamname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logicalstreamname().data(), static_cast<int>(this->_internal_logicalstreamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnregisterPhysicalStreamRequest.logicalStreamName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_logicalstreamname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnregisterPhysicalStreamRequest)
  return target;
}

size_t UnregisterPhysicalStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnregisterPhysicalStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string physicalStreamName = 2;
  if (this->physicalstreamname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physicalstreamname());
  }

  // string logicalStreamName = 3;
  if (this->logicalstreamname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logicalstreamname());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterPhysicalStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnregisterPhysicalStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterPhysicalStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterPhysicalStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnregisterPhysicalStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnregisterPhysicalStreamRequest)
    MergeFrom(*source);
  }
}

void UnregisterPhysicalStreamRequest::MergeFrom(const UnregisterPhysicalStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnregisterPhysicalStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.physicalstreamname().size() > 0) {

    physicalstreamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.physicalstreamname_);
  }
  if (from.logicalstreamname().size() > 0) {

    logicalstreamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logicalstreamname_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UnregisterPhysicalStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnregisterPhysicalStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterPhysicalStreamRequest::CopyFrom(const UnregisterPhysicalStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnregisterPhysicalStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterPhysicalStreamRequest::IsInitialized() const {
  return true;
}

void UnregisterPhysicalStreamRequest::InternalSwap(UnregisterPhysicalStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  physicalstreamname_.Swap(&other->physicalstreamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logicalstreamname_.Swap(&other->logicalstreamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterPhysicalStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterPhysicalStreamReply::InitAsDefaultInstance() {
}
class UnregisterPhysicalStreamReply::_Internal {
 public:
};

UnregisterPhysicalStreamReply::UnregisterPhysicalStreamReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnregisterPhysicalStreamReply)
}
UnregisterPhysicalStreamReply::UnregisterPhysicalStreamReply(const UnregisterPhysicalStreamReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:UnregisterPhysicalStreamReply)
}

void UnregisterPhysicalStreamReply::SharedCtor() {
  success_ = false;
}

UnregisterPhysicalStreamReply::~UnregisterPhysicalStreamReply() {
  // @@protoc_insertion_point(destructor:UnregisterPhysicalStreamReply)
  SharedDtor();
}

void UnregisterPhysicalStreamReply::SharedDtor() {
}

void UnregisterPhysicalStreamReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterPhysicalStreamReply& UnregisterPhysicalStreamReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterPhysicalStreamReply_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void UnregisterPhysicalStreamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:UnregisterPhysicalStreamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* UnregisterPhysicalStreamReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterPhysicalStreamReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnregisterPhysicalStreamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnregisterPhysicalStreamReply)
  return target;
}

size_t UnregisterPhysicalStreamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnregisterPhysicalStreamReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterPhysicalStreamReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnregisterPhysicalStreamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterPhysicalStreamReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterPhysicalStreamReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnregisterPhysicalStreamReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnregisterPhysicalStreamReply)
    MergeFrom(*source);
  }
}

void UnregisterPhysicalStreamReply::MergeFrom(const UnregisterPhysicalStreamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnregisterPhysicalStreamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UnregisterPhysicalStreamReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnregisterPhysicalStreamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterPhysicalStreamReply::CopyFrom(const UnregisterPhysicalStreamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnregisterPhysicalStreamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterPhysicalStreamReply::IsInitialized() const {
  return true;
}

void UnregisterPhysicalStreamReply::InternalSwap(UnregisterPhysicalStreamReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterPhysicalStreamReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterLogicalStreamRequest::InitAsDefaultInstance() {
}
class RegisterLogicalStreamRequest::_Internal {
 public:
};

RegisterLogicalStreamRequest::RegisterLogicalStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterLogicalStreamRequest)
}
RegisterLogicalStreamRequest::RegisterLogicalStreamRequest(const RegisterLogicalStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  streamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_streamname().empty()) {
    streamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.streamname_);
  }
  streamschema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_streamschema().empty()) {
    streamschema_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.streamschema_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:RegisterLogicalStreamRequest)
}

void RegisterLogicalStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterLogicalStreamRequest_Coordinator_2eproto.base);
  streamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streamschema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

RegisterLogicalStreamRequest::~RegisterLogicalStreamRequest() {
  // @@protoc_insertion_point(destructor:RegisterLogicalStreamRequest)
  SharedDtor();
}

void RegisterLogicalStreamRequest::SharedDtor() {
  streamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streamschema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterLogicalStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterLogicalStreamRequest& RegisterLogicalStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterLogicalStreamRequest_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void RegisterLogicalStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterLogicalStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streamschema_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RegisterLogicalStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string streamName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_streamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterLogicalStreamRequest.streamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string streamSchema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_streamschema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegisterLogicalStreamRequest.streamSchema"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterLogicalStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterLogicalStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string streamName = 2;
  if (this->streamname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_streamname().data(), static_cast<int>(this->_internal_streamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterLogicalStreamRequest.streamName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_streamname(), target);
  }

  // string streamSchema = 3;
  if (this->streamschema().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_streamschema().data(), static_cast<int>(this->_internal_streamschema().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterLogicalStreamRequest.streamSchema");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_streamschema(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterLogicalStreamRequest)
  return target;
}

size_t RegisterLogicalStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterLogicalStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string streamName = 2;
  if (this->streamname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_streamname());
  }

  // string streamSchema = 3;
  if (this->streamschema().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_streamschema());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterLogicalStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterLogicalStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterLogicalStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterLogicalStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterLogicalStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterLogicalStreamRequest)
    MergeFrom(*source);
  }
}

void RegisterLogicalStreamRequest::MergeFrom(const RegisterLogicalStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterLogicalStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.streamname().size() > 0) {

    streamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.streamname_);
  }
  if (from.streamschema().size() > 0) {

    streamschema_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.streamschema_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RegisterLogicalStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterLogicalStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterLogicalStreamRequest::CopyFrom(const RegisterLogicalStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterLogicalStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLogicalStreamRequest::IsInitialized() const {
  return true;
}

void RegisterLogicalStreamRequest::InternalSwap(RegisterLogicalStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  streamname_.Swap(&other->streamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  streamschema_.Swap(&other->streamschema_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterLogicalStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterLogicalStreamReply::InitAsDefaultInstance() {
}
class RegisterLogicalStreamReply::_Internal {
 public:
};

RegisterLogicalStreamReply::RegisterLogicalStreamReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterLogicalStreamReply)
}
RegisterLogicalStreamReply::RegisterLogicalStreamReply(const RegisterLogicalStreamReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:RegisterLogicalStreamReply)
}

void RegisterLogicalStreamReply::SharedCtor() {
  success_ = false;
}

RegisterLogicalStreamReply::~RegisterLogicalStreamReply() {
  // @@protoc_insertion_point(destructor:RegisterLogicalStreamReply)
  SharedDtor();
}

void RegisterLogicalStreamReply::SharedDtor() {
}

void RegisterLogicalStreamReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterLogicalStreamReply& RegisterLogicalStreamReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterLogicalStreamReply_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void RegisterLogicalStreamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterLogicalStreamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* RegisterLogicalStreamReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterLogicalStreamReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterLogicalStreamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterLogicalStreamReply)
  return target;
}

size_t RegisterLogicalStreamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterLogicalStreamReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterLogicalStreamReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterLogicalStreamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterLogicalStreamReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterLogicalStreamReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterLogicalStreamReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterLogicalStreamReply)
    MergeFrom(*source);
  }
}

void RegisterLogicalStreamReply::MergeFrom(const RegisterLogicalStreamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterLogicalStreamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RegisterLogicalStreamReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterLogicalStreamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterLogicalStreamReply::CopyFrom(const RegisterLogicalStreamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterLogicalStreamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLogicalStreamReply::IsInitialized() const {
  return true;
}

void RegisterLogicalStreamReply::InternalSwap(RegisterLogicalStreamReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterLogicalStreamReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterLogicalStreamRequest::InitAsDefaultInstance() {
}
class UnregisterLogicalStreamRequest::_Internal {
 public:
};

UnregisterLogicalStreamRequest::UnregisterLogicalStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnregisterLogicalStreamRequest)
}
UnregisterLogicalStreamRequest::UnregisterLogicalStreamRequest(const UnregisterLogicalStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  streamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_streamname().empty()) {
    streamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.streamname_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:UnregisterLogicalStreamRequest)
}

void UnregisterLogicalStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnregisterLogicalStreamRequest_Coordinator_2eproto.base);
  streamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

UnregisterLogicalStreamRequest::~UnregisterLogicalStreamRequest() {
  // @@protoc_insertion_point(destructor:UnregisterLogicalStreamRequest)
  SharedDtor();
}

void UnregisterLogicalStreamRequest::SharedDtor() {
  streamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnregisterLogicalStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterLogicalStreamRequest& UnregisterLogicalStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterLogicalStreamRequest_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void UnregisterLogicalStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UnregisterLogicalStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* UnregisterLogicalStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string streamName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_streamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UnregisterLogicalStreamRequest.streamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterLogicalStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnregisterLogicalStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string streamName = 2;
  if (this->streamname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_streamname().data(), static_cast<int>(this->_internal_streamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UnregisterLogicalStreamRequest.streamName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_streamname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnregisterLogicalStreamRequest)
  return target;
}

size_t UnregisterLogicalStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnregisterLogicalStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string streamName = 2;
  if (this->streamname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_streamname());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterLogicalStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnregisterLogicalStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterLogicalStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterLogicalStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnregisterLogicalStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnregisterLogicalStreamRequest)
    MergeFrom(*source);
  }
}

void UnregisterLogicalStreamRequest::MergeFrom(const UnregisterLogicalStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnregisterLogicalStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.streamname().size() > 0) {

    streamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.streamname_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UnregisterLogicalStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnregisterLogicalStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterLogicalStreamRequest::CopyFrom(const UnregisterLogicalStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnregisterLogicalStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterLogicalStreamRequest::IsInitialized() const {
  return true;
}

void UnregisterLogicalStreamRequest::InternalSwap(UnregisterLogicalStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  streamname_.Swap(&other->streamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterLogicalStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterLogicalStreamReply::InitAsDefaultInstance() {
}
class UnregisterLogicalStreamReply::_Internal {
 public:
};

UnregisterLogicalStreamReply::UnregisterLogicalStreamReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnregisterLogicalStreamReply)
}
UnregisterLogicalStreamReply::UnregisterLogicalStreamReply(const UnregisterLogicalStreamReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:UnregisterLogicalStreamReply)
}

void UnregisterLogicalStreamReply::SharedCtor() {
  success_ = false;
}

UnregisterLogicalStreamReply::~UnregisterLogicalStreamReply() {
  // @@protoc_insertion_point(destructor:UnregisterLogicalStreamReply)
  SharedDtor();
}

void UnregisterLogicalStreamReply::SharedDtor() {
}

void UnregisterLogicalStreamReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterLogicalStreamReply& UnregisterLogicalStreamReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterLogicalStreamReply_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void UnregisterLogicalStreamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:UnregisterLogicalStreamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* UnregisterLogicalStreamReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterLogicalStreamReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnregisterLogicalStreamReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnregisterLogicalStreamReply)
  return target;
}

size_t UnregisterLogicalStreamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnregisterLogicalStreamReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterLogicalStreamReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnregisterLogicalStreamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterLogicalStreamReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterLogicalStreamReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnregisterLogicalStreamReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnregisterLogicalStreamReply)
    MergeFrom(*source);
  }
}

void UnregisterLogicalStreamReply::MergeFrom(const UnregisterLogicalStreamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnregisterLogicalStreamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UnregisterLogicalStreamReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnregisterLogicalStreamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterLogicalStreamReply::CopyFrom(const UnregisterLogicalStreamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnregisterLogicalStreamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterLogicalStreamReply::IsInitialized() const {
  return true;
}

void UnregisterLogicalStreamReply::InternalSwap(UnregisterLogicalStreamReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterLogicalStreamReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddParentRequest::InitAsDefaultInstance() {
}
class AddParentRequest::_Internal {
 public:
};

AddParentRequest::AddParentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddParentRequest)
}
AddParentRequest::AddParentRequest(const AddParentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&childid_, &from.childid_,
    static_cast<size_t>(reinterpret_cast<char*>(&parentid_) -
    reinterpret_cast<char*>(&childid_)) + sizeof(parentid_));
  // @@protoc_insertion_point(copy_constructor:AddParentRequest)
}

void AddParentRequest::SharedCtor() {
  ::memset(&childid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentid_) -
      reinterpret_cast<char*>(&childid_)) + sizeof(parentid_));
}

AddParentRequest::~AddParentRequest() {
  // @@protoc_insertion_point(destructor:AddParentRequest)
  SharedDtor();
}

void AddParentRequest::SharedDtor() {
}

void AddParentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddParentRequest& AddParentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddParentRequest_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void AddParentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AddParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&childid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentid_) -
      reinterpret_cast<char*>(&childid_)) + sizeof(parentid_));
  _internal_metadata_.Clear();
}

const char* AddParentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 childId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          childid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddParentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 childId = 1;
  if (this->childid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_childid(), target);
  }

  // int64 parentId = 2;
  if (this->parentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_parentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddParentRequest)
  return target;
}

size_t AddParentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddParentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 childId = 1;
  if (this->childid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_childid());
  }

  // int64 parentId = 2;
  if (this->parentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parentid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddParentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddParentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddParentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddParentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddParentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddParentRequest)
    MergeFrom(*source);
  }
}

void AddParentRequest::MergeFrom(const AddParentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddParentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.childid() != 0) {
    _internal_set_childid(from._internal_childid());
  }
  if (from.parentid() != 0) {
    _internal_set_parentid(from._internal_parentid());
  }
}

void AddParentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddParentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddParentRequest::CopyFrom(const AddParentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddParentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddParentRequest::IsInitialized() const {
  return true;
}

void AddParentRequest::InternalSwap(AddParentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(childid_, other->childid_);
  swap(parentid_, other->parentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddParentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddParentReply::InitAsDefaultInstance() {
}
class AddParentReply::_Internal {
 public:
};

AddParentReply::AddParentReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddParentReply)
}
AddParentReply::AddParentReply(const AddParentReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:AddParentReply)
}

void AddParentReply::SharedCtor() {
  success_ = false;
}

AddParentReply::~AddParentReply() {
  // @@protoc_insertion_point(destructor:AddParentReply)
  SharedDtor();
}

void AddParentReply::SharedDtor() {
}

void AddParentReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddParentReply& AddParentReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddParentReply_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void AddParentReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AddParentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* AddParentReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddParentReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddParentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddParentReply)
  return target;
}

size_t AddParentReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddParentReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddParentReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddParentReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AddParentReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddParentReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddParentReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddParentReply)
    MergeFrom(*source);
  }
}

void AddParentReply::MergeFrom(const AddParentReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddParentReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void AddParentReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddParentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddParentReply::CopyFrom(const AddParentReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddParentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddParentReply::IsInitialized() const {
  return true;
}

void AddParentReply::InternalSwap(AddParentReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddParentReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveParentRequest::InitAsDefaultInstance() {
}
class RemoveParentRequest::_Internal {
 public:
};

RemoveParentRequest::RemoveParentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoveParentRequest)
}
RemoveParentRequest::RemoveParentRequest(const RemoveParentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&childid_, &from.childid_,
    static_cast<size_t>(reinterpret_cast<char*>(&parentid_) -
    reinterpret_cast<char*>(&childid_)) + sizeof(parentid_));
  // @@protoc_insertion_point(copy_constructor:RemoveParentRequest)
}

void RemoveParentRequest::SharedCtor() {
  ::memset(&childid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentid_) -
      reinterpret_cast<char*>(&childid_)) + sizeof(parentid_));
}

RemoveParentRequest::~RemoveParentRequest() {
  // @@protoc_insertion_point(destructor:RemoveParentRequest)
  SharedDtor();
}

void RemoveParentRequest::SharedDtor() {
}

void RemoveParentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveParentRequest& RemoveParentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveParentRequest_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void RemoveParentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoveParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&childid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentid_) -
      reinterpret_cast<char*>(&childid_)) + sizeof(parentid_));
  _internal_metadata_.Clear();
}

const char* RemoveParentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 childId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          childid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveParentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoveParentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 childId = 1;
  if (this->childid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_childid(), target);
  }

  // int64 parentId = 2;
  if (this->parentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_parentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoveParentRequest)
  return target;
}

size_t RemoveParentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoveParentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 childId = 1;
  if (this->childid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_childid());
  }

  // int64 parentId = 2;
  if (this->parentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parentid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveParentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoveParentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveParentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveParentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoveParentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoveParentRequest)
    MergeFrom(*source);
  }
}

void RemoveParentRequest::MergeFrom(const RemoveParentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoveParentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.childid() != 0) {
    _internal_set_childid(from._internal_childid());
  }
  if (from.parentid() != 0) {
    _internal_set_parentid(from._internal_parentid());
  }
}

void RemoveParentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoveParentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveParentRequest::CopyFrom(const RemoveParentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoveParentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveParentRequest::IsInitialized() const {
  return true;
}

void RemoveParentRequest::InternalSwap(RemoveParentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(childid_, other->childid_);
  swap(parentid_, other->parentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveParentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveParentReply::InitAsDefaultInstance() {
}
class RemoveParentReply::_Internal {
 public:
};

RemoveParentReply::RemoveParentReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoveParentReply)
}
RemoveParentReply::RemoveParentReply(const RemoveParentReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:RemoveParentReply)
}

void RemoveParentReply::SharedCtor() {
  success_ = false;
}

RemoveParentReply::~RemoveParentReply() {
  // @@protoc_insertion_point(destructor:RemoveParentReply)
  SharedDtor();
}

void RemoveParentReply::SharedDtor() {
}

void RemoveParentReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveParentReply& RemoveParentReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveParentReply_Coordinator_2eproto.base);
  return *internal_default_instance();
}


void RemoveParentReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoveParentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

const char* RemoveParentReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveParentReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoveParentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoveParentReply)
  return target;
}

size_t RemoveParentReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoveParentReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveParentReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoveParentReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveParentReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveParentReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoveParentReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoveParentReply)
    MergeFrom(*source);
  }
}

void RemoveParentReply::MergeFrom(const RemoveParentReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoveParentReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RemoveParentReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoveParentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveParentReply::CopyFrom(const RemoveParentReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoveParentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveParentReply::IsInitialized() const {
  return true;
}

void RemoveParentReply::InternalSwap(RemoveParentReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveParentReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RegisterNodeRequest* Arena::CreateMaybeMessage< ::RegisterNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterNodeReply* Arena::CreateMaybeMessage< ::RegisterNodeReply >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterNodeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::UnregisterNodeRequest* Arena::CreateMaybeMessage< ::UnregisterNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UnregisterNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UnregisterNodeReply* Arena::CreateMaybeMessage< ::UnregisterNodeReply >(Arena* arena) {
  return Arena::CreateInternal< ::UnregisterNodeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterPhysicalStreamRequest* Arena::CreateMaybeMessage< ::RegisterPhysicalStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterPhysicalStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterPhysicalStreamReply* Arena::CreateMaybeMessage< ::RegisterPhysicalStreamReply >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterPhysicalStreamReply >(arena);
}
template<> PROTOBUF_NOINLINE ::UnregisterPhysicalStreamRequest* Arena::CreateMaybeMessage< ::UnregisterPhysicalStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UnregisterPhysicalStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UnregisterPhysicalStreamReply* Arena::CreateMaybeMessage< ::UnregisterPhysicalStreamReply >(Arena* arena) {
  return Arena::CreateInternal< ::UnregisterPhysicalStreamReply >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterLogicalStreamRequest* Arena::CreateMaybeMessage< ::RegisterLogicalStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterLogicalStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterLogicalStreamReply* Arena::CreateMaybeMessage< ::RegisterLogicalStreamReply >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterLogicalStreamReply >(arena);
}
template<> PROTOBUF_NOINLINE ::UnregisterLogicalStreamRequest* Arena::CreateMaybeMessage< ::UnregisterLogicalStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UnregisterLogicalStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UnregisterLogicalStreamReply* Arena::CreateMaybeMessage< ::UnregisterLogicalStreamReply >(Arena* arena) {
  return Arena::CreateInternal< ::UnregisterLogicalStreamReply >(arena);
}
template<> PROTOBUF_NOINLINE ::AddParentRequest* Arena::CreateMaybeMessage< ::AddParentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::AddParentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AddParentReply* Arena::CreateMaybeMessage< ::AddParentReply >(Arena* arena) {
  return Arena::CreateInternal< ::AddParentReply >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoveParentRequest* Arena::CreateMaybeMessage< ::RemoveParentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::RemoveParentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoveParentReply* Arena::CreateMaybeMessage< ::RemoveParentReply >(Arena* arena) {
  return Arena::CreateInternal< ::RemoveParentReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
