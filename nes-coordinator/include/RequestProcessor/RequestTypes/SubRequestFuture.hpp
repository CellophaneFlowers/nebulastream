#ifndef NES_SUBREQUESTFUTURE_HPP
#define NES_SUBREQUESTFUTURE_HPP
#include <memory>
#include <future>
#include <any>

namespace NES::RequestProcessor {
class AbstractSubRequest;
using AbstractSubRequestPtr = std::shared_ptr<AbstractSubRequest>;

/**
 * @brief This class contains a future and a pointer to a sub request object. It's interface ensures that the
 * execution of the sub request has started or finished before any thread will wait on the future. This prevents
 * deadlocks in single threaded execution.
 */
class SubRequestFuture {
  public:
    /**
     * @brief Constructor
     * @param request the request which needs to be excuted for the wrapped future to become true
     * @param future the future which will contain the result generated by the request
     */
    explicit SubRequestFuture(AbstractSubRequestPtr request, std::future<std::any> future);

    /**
     * @brief If the contained request is not being executed yet, execute it and then obtain the resutl from the future.
     * If the request was already executed or is currently being executed by another thread, wait on the future and
     * return its result once the other thread sets the corresponding promise
     * @return the result generated by the request.
     */
    std::any get();

  private:
    AbstractSubRequestPtr request;
    std::future<std::any> future;
};
}
#endif//NES_SUBREQUESTFUTURE_HPP
